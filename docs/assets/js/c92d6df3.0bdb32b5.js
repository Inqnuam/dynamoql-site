"use strict";(self.webpackChunkdynamo_ql=self.webpackChunkdynamo_ql||[]).push([[8655],{7970:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>h});var t=r(5893),i=r(1151),s=r(4866),a=r(5162);const l={},d=void 0,o={id:"schema/data-types/String",title:"String",description:"Introduction",source:"@site/docs/schema/data-types/11-String.mdx",sourceDirName:"schema/data-types",slug:"/schema/data-types/String",permalink:"/dynamoql-site/docs/schema/data-types/String",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Set",permalink:"/dynamoql-site/docs/schema/data-types/Set"},next:{title:"Type Utilities",permalink:"/dynamoql-site/docs/category/type-utilities"}},c={},h=[{value:"Introduction",id:"introduction",level:3},{value:"Define a String",id:"define-a-string",level:3},{value:"Options",id:"options",level:3},{value:"- primaryIndex",id:"--primaryindex",level:3},{value:"- sortKey",id:"--sortkey",level:3},{value:"- LSI",id:"--lsi",level:3},{value:"- GSI",id:"--gsi",level:3},{value:"- required",id:"--required",level:3},{value:"- default",id:"--default",level:3},{value:"- validate",id:"--validate",level:3},{value:"- minLength",id:"--minlength",level:3},{value:"- maxLength",id:"--maxlength",level:3},{value:"- enum",id:"--enum",level:3},{value:"- trim",id:"--trim",level:3},{value:"- lowercase",id:"--lowercase",level:3},{value:"- uppercase",id:"--uppercase",level:3},{value:"- capitalize",id:"--capitalize",level:3},{value:"- set",id:"--set",level:3},{value:"- get",id:"--get",level:3},{value:"- description",id:"--description",level:3},{value:"Condition expression",id:"condition-expression",level:3},{value:"- equals",id:"--equals",level:3},{value:"- not equals",id:"--not-equals",level:3},{value:"- attribute exists",id:"--attribute-exists",level:3},{value:"- includes",id:"--includes",level:3},{value:"- string length",id:"--string-length",level:3},{value:"- attribute type",id:"--attribute-type",level:3},{value:"- starts with",id:"--starts-with",level:3},{value:"- greather than",id:"--greather-than",level:3},{value:"- greather than or equal",id:"--greather-than-or-equal",level:3},{value:"- little than",id:"--little-than",level:3},{value:"- little than or equal",id:"--little-than-or-equal",level:3},{value:"- between",id:"--between",level:3},{value:"- in",id:"--in",level:3},{value:"- AND",id:"--and",level:3},{value:"- OR",id:"--or",level:3},{value:"- NOT",id:"--not",level:3},{value:"Update expressions",id:"update-expressions",level:3},{value:"- set",id:"--set-1",level:3},{value:"- if not exists",id:"--if-not-exists",level:3}];function u(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"String"}),' is DynamoDB\'s String data type (marshalled as "S") for DynamoQL.']}),"\n",(0,t.jsx)(n.h3,{id:"define-a-string",children:"Define a String"}),"\n",(0,t.jsxs)(s.Z,{children:[(0,t.jsx)(a.Z,{value:"dql",label:"DynamoQL",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  // highlight-next-line\n  password: String,\n  sex: {\n    // highlight-next-line\n    type: String,\n  }\n} as const);\n'})})}),(0,t.jsx)(a.Z,{value:"ts",label:"produced type",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface IUserSchema {\n    id: string,\n    password: string,\n    sex?: string\n}\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,t.jsx)(n.h3,{id:"--primaryindex",children:"- primaryIndex"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,t.jsxs)(n.p,{children:["boolean which markes attribute as HASH key and makes attribute as required, default is ",(0,t.jsx)(n.code,{children:"false"}),".",(0,t.jsx)(n.br,{}),"\n","A Schema can have only one primaryIndex."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    // highlight-next-line\n    primaryIndex: true,\n  },\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--sortkey",children:"- sortKey"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,t.jsxs)(n.p,{children:["boolean which markes attribute as RANGE key and makes attribute as required, default is ",(0,t.jsx)(n.code,{children:"false"}),".",(0,t.jsx)(n.br,{}),"\n","A Schema can have only one sortKey."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  country: {\n    type: String,\n    primaryIndex: true,\n  },\n  city: {\n    type: String,\n    // highlight-next-line\n    sortKey: true\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--lsi",children:"- LSI"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,t.jsx)(n.p,{children:"defines a Local Secondary Index."}),"\n",(0,t.jsx)(n.p,{children:"LSI option is an object where you must provide:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"indexName"})," which should be unique across the Schema."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"project"})," which may be ",(0,t.jsx)(n.code,{children:"ALL"})," | ",(0,t.jsx)(n.code,{children:"KEYS"})," or  string[] where strings are attriubute names defined in the Schema."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n  },\n  firstname: {\n    type: String,\n    // highlight-start\n    LSI: {\n        indexName: "firstname-index",\n        project: "ALL"\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--gsi",children:"- GSI"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,t.jsx)(n.p,{children:"defines a Global Secondary Index."}),"\n",(0,t.jsx)(n.p,{children:"GSI option is an object where you must provide:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"indexName"})," which should be unique across the Schema."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"project"})," which may be ",(0,t.jsx)(n.code,{children:"ALL"})," | ",(0,t.jsx)(n.code,{children:"KEYS"})," or  string[] where strings are attriubute names defined in the Schema."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n  },\n  firstname: {\n    type: String,\n    // highlight-start\n    GSI: {\n        indexName: "firstname-index",\n        project: "ALL"\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.p,{children:"for composite table (HASH and RANGE) you must provide another attribute with GSI:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"indexName"})," which must be one of defined GSI indexName."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sortKey"})," true."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n  },\n  firstname: {\n    type: String,\n    GSI: {\n        // highlight-next-line\n        indexName: "firstname-index",\n        project: "ALL"\n    }\n  },\n  lastname: {\n    type: String,\n    GSI: {\n          // highlight-start\n        indexName: "firstname-index",\n        sortKey: true\n        // highlight-end\n    }\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--required",children:"- required"}),"\n",(0,t.jsxs)(n.p,{children:["boolean which makes attribute as required or optionnal, default is ",(0,t.jsx)(n.code,{children:"false"})," when type is defined with an Object."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  password: {\n    type: String,\n    // highlight-next-line\n    required: true\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--default",children:"- default"}),"\n",(0,t.jsxs)(n.p,{children:["To set a default value for an attribute use ",(0,t.jsx)(n.code,{children:"default"})," option."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  sex: {\n    type: String,\n    // highlight-next-line\n    default: "unknown"\n  }\n} as const);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["With this configuration when you ",(0,t.jsx)(n.code,{children:"put"})," an Item into your table, your Item will contain password attribute with 5 as value."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"default"})," must be a String.",(0,t.jsx)(n.br,{}),"\n","Otherwise it will throw an error during dev time and runtime."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  password: {\n    type: String,\n    // err\n    default: true // DynamoQLInvalidTypeException: "password" expected to be "S" received "BOOL".\n  }\n} as const);\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"default"})," can also be a (async) function which accepts one argument (put Item value) and must return a String."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  sex: {\n    type: String,\n    // highlight-start\n    default: (item: Record<string, any>)=> {\n        return "unknown"\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--validate",children:"- validate"}),"\n",(0,t.jsxs)(n.p,{children:["validate option allows you to manually validate provided value in ",(0,t.jsx)(n.code,{children:"put"})," and ",(0,t.jsx)(n.code,{children:"update"})," commands.",(0,t.jsx)(n.br,{}),"\n","To return an error you should return a string which explains value invalidity. Any other returned value is considered as valid."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  email: {\n    type: String,\n    // highlight-start\n    validate: (self: string)=> {\n        if(!self.includes("@")) {\n            return "Invalid e-mail"\n        }\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--minlength",children:"- minLength"}),"\n",(0,t.jsx)(n.p,{children:"define minimum string length."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  password: {\n    type: String,\n     // highlight-next-line\n    min: 12\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--maxlength",children:"- maxLength"}),"\n",(0,t.jsx)(n.p,{children:"define maximum string length."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  password: {\n    type: String,\n     // highlight-next-line\n    max: 89\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--enum",children:"- enum"}),"\n",(0,t.jsx)(n.p,{children:"define accepted values."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  sex: {\n    type: String,\n     // highlight-next-line\n    enum: ["female", "male", "unknown"]\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--trim",children:"- trim"}),"\n",(0,t.jsx)(n.p,{children:"boolean to trim or not provided value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  firstname: {\n    type: String,\n     // highlight-next-line\n    trim: true\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--lowercase",children:"- lowercase"}),"\n",(0,t.jsx)(n.p,{children:"boolean to lowercase or not provided value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  firstname: {\n    type: String,\n     // highlight-next-line\n    lowercase: true\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--uppercase",children:"- uppercase"}),"\n",(0,t.jsx)(n.p,{children:"boolean to uppercase or not provided value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  firstname: {\n    type: String,\n     // highlight-next-line\n    uppercase: true\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--capitalize",children:"- capitalize"}),"\n",(0,t.jsx)(n.p,{children:"boolean to capitalize or not provided value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  firstname: {\n    type: String,\n     // highlight-next-line\n    capitalize: true\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--set",children:"- set"}),"\n",(0,t.jsxs)(n.p,{children:["To modify a value before storing it use ",(0,t.jsx)(n.code,{children:"set"})," option.",(0,t.jsx)(n.br,{}),"\n","set (async) function accepts 3 arguments:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"self"})," provided value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"item"})," entier put Item object."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"setterInfo"})," an optionnal value provided inside in put, batchPut, batchWrite, transactWrite command's options."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"set"})," will not be called if attribute doesn't exists in put Item object."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  password: {\n    type: String,\n    // highlight-start\n    set: (self: string, item: Record<string, any>, setterInfo?: any)=> {\n\n        if(setterInfo?.generateHash) {\n         return functionToGenerateHash(self)\n        }\n\n        return self\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--get",children:"- get"}),"\n",(0,t.jsx)(n.p,{children:"When reteving an Item we can transform field's value with get option."}),"\n",(0,t.jsx)(n.p,{children:"get (async) function accepts 3 arguments:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"self"})," retrieved value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"item"})," entier retrieved Item object."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"getterInfo"})," an optionnal value provided inside get, batchGet, transactGet, query, scan command's options."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"get"})," can return anything.",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.code,{children:"get"})," will not be called if attribute doesn't exists in stored Item."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  password: {\n    type: String,\n    // highlight-start\n    get: (self: String, item: Record<string, any>, getterInfo?: any)=> {\n        if(getterInfo?.forFrontend) {\n            return undefined\n        }\n         return self\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"get"})," returned value's type affects Item type when retriving Item(s) from DynamoDB."]})}),"\n",(0,t.jsx)(n.h3,{id:"--description",children:"- description"}),"\n",(0,t.jsx)(n.p,{children:"add any information to the Schema for your personal usage."}),"\n",(0,t.jsx)(n.h3,{id:"condition-expression",children:"Condition expression"}),"\n",(0,t.jsxs)(n.p,{children:["Condition expression are not part of Schema but they are based on your defined Schema.",(0,t.jsx)(n.br,{}),"\n","They are used in various DynamoDB operations to check for some condition(s).",(0,t.jsx)(n.br,{}),"\n","DynamoQL supports all DynamoDB Condition expression."]}),"\n",(0,t.jsx)(n.h3,{id:"--equals",children:"- equals"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: "John"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"or"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-next-line\n    $eq: "John"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--not-equals",children:"- not equals"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-next-line\n    $neq: "John"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--attribute-exists",children:"- attribute exists"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"$exists"})," can be ",(0,t.jsx)(n.code,{children:"true"})," or ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:"{\n  firstname: {\n    // highlight-next-line\n    $exists: true\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"--includes",children:"- includes"}),"\n",(0,t.jsx)(n.p,{children:"Checks if stored string contains provided value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-next-line\n    $includes: "oh"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--string-length",children:"- string length"}),"\n",(0,t.jsx)(n.p,{children:"Checks for stored string's length."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:"{\n  firstname: {\n    // highlight-next-line\n    $size: 1\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"$size"})," can also be any valid numeric comparison operator."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:"{\n  firstname: {\n    $size: {\n      // highlight-next-line\n      $gt: 0\n    }\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Possible operators are ",(0,t.jsx)(n.a,{href:"./Number#--equals",children:"$eq"}),", ",(0,t.jsx)(n.a,{href:"./Number#--not-equals",children:"$neq"}),", ",(0,t.jsx)(n.a,{href:"./Number#--greather-than",children:"$gt"}),", ",(0,t.jsx)(n.a,{href:"./Number#--greather-than-or-equal",children:"$gte"}),", ",(0,t.jsx)(n.a,{href:"./Number#--little-than",children:"$lt"}),", ",(0,t.jsx)(n.a,{href:"./Number#--little-than-or-equal",children:"$lte"}),", ",(0,t.jsx)(n.a,{href:"./Number#--in",children:"$in"}),", ",(0,t.jsx)(n.a,{href:"./Number#--between",children:"$between"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"--attribute-type",children:"- attribute type"}),"\n",(0,t.jsx)(n.p,{children:"Checks for stored attribute type."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:"{\n  firstname: {\n    // highlight-next-line\n    $type: String\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"$type"})," can be String, Number, Boolean, Null, Buffer, Object, Array, or ",(0,t.jsx)(n.code,{children:"{type: Set, items: String | Number | Buffer }"})]}),"\n",(0,t.jsx)(n.h3,{id:"--starts-with",children:"- starts with"}),"\n",(0,t.jsx)(n.p,{children:"Checks if stored string starts with provided value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-next-line\n    $startsWith: "Jo"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--greather-than",children:"- greather than"}),"\n",(0,t.jsx)(n.p,{children:"Lexicographically compares if stored string is greather than provided value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-next-line\n    $gt: "Joh"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--greather-than-or-equal",children:"- greather than or equal"}),"\n",(0,t.jsx)(n.p,{children:"Lexicographically compares if stored string is greather than or equal provided value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-next-line\n    $gte: "Joh"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--little-than",children:"- little than"}),"\n",(0,t.jsx)(n.p,{children:"Lexicographically compares if stored string is little than provided value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-next-line\n    $lt: "Joh"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--little-than-or-equal",children:"- little than or equal"}),"\n",(0,t.jsx)(n.p,{children:"Lexicographically compares if stored string is little than or equal provided value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-next-line\n    $lte: "Joh"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--between",children:"- between"}),"\n",(0,t.jsxs)(n.p,{children:["Lexicographically compares if stored string is greather than or equal ",(0,t.jsx)(n.code,{children:"value1"})," AND is little than or equal ",(0,t.jsx)(n.code,{children:"value2"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:"{\n  firstname: {\n    // highlight-next-line\n    $between: [value1, value2]\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"--in",children:"- in"}),"\n",(0,t.jsx)(n.p,{children:"Checks if provided array includes stored string."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-next-line\n    $in: ["Steve", 214, "Sara", false, "John", "Mike", null]\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--and",children:"- AND"}),"\n",(0,t.jsx)(n.p,{children:"Checks for multiple conditions. Condition is valid if ALL specified conditions are satisfied."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-start\n    $and: [\n      {\n        $size: 4\n      },\n      {\n        $includes: "oh"\n      }\n    ]\n    // highlight-end\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"shorthand style"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    $size: 4,\n    $includes: "oh"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--or",children:"- OR"}),"\n",(0,t.jsx)(n.p,{children:"Checks for multiple conditions. Condition is valid if at least one of specified conditions is satisfied."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-start\n    $or: [\n      {\n        $size: 6\n      },\n      {\n        $includes: "oh"\n      }\n    ]\n     // highlight-end\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--not",children:"- NOT"}),"\n",(0,t.jsx)(n.p,{children:"Condition is valid if specified condition is NOT satisfied."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-next-line\n    $not: {\n      $includes: "admin"\n    }\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"$not"})," accepts any Condition expression."]}),"\n",(0,t.jsx)(n.p,{children:"When multiple conditions are provided inside $not: {} they are considered as $and condition."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    $not: {\n      // highlight-start\n      $size: 6,\n      $includes: "admin"\n      // highlight-end\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"longhand equivalent is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    $not: {\n      // highlight-start\n      $and: [\n        {\n          $size: 6\n        },\n        {\n          $includes: "admin"\n        }\n      ]\n      // highlight-end\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"update-expressions",children:"Update expressions"}),"\n",(0,t.jsx)(n.p,{children:"Like Condition expression, Update expressions are not part of Schema, but they are based on defined Schema."}),"\n",(0,t.jsxs)(n.p,{children:["Update expressions are used in ",(0,t.jsx)(n.code,{children:"update"}),", ",(0,t.jsx)(n.code,{children:"transactUpdate"})," and ",(0,t.jsx)(n.code,{children:"transactWrite"})," operations."]}),"\n",(0,t.jsx)(n.p,{children:"DynamoQL supports all DynamoDB update operations."}),"\n",(0,t.jsx)(n.h3,{id:"--set-1",children:"- set"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"$set"})," replaces stored string by provided string."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-next-line\n    $set: "John"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"shorthand version is"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: "John"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"--if-not-exists",children:"- if not exists"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"$ifNotExists"})," sets provided string if attribute do not exists in stored item.",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.code,{children:"$ifNotExists"})," dont affects Condition expression and is attribute specific.",(0,t.jsx)(n.br,{}),"\n","If attribute exists, stored value stays unchanged."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  firstname: {\n    // highlight-next-line\n    $ifNotExists: "John"\n  }\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},5162:(e,n,r)=>{r.d(n,{Z:()=>a});r(7294);var t=r(512);const i={tabItem:"tabItem_Ymn6"};var s=r(5893);function a(e){let{children:n,hidden:r,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.Z)(i.tabItem,a),hidden:r,children:n})}},4866:(e,n,r)=>{r.d(n,{Z:()=>b});var t=r(7294),i=r(512),s=r(2466),a=r(6550),l=r(469),d=r(1980),o=r(7392),c=r(12);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:i}}=e;return{value:n,label:r,attributes:t,default:i}}))}(r);return function(e){const n=(0,o.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function m(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:r}=e;const i=(0,a.k6)(),s=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,d._X)(s),(0,t.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(i.location.search);n.set(s,e),i.replace({...i.location,search:n.toString()})}),[s,i])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,s=u(e),[a,d]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[o,h]=p({queryString:r,groupId:i}),[x,g]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,s]=(0,c.Nk)(r);return[i,(0,t.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:i}),j=(()=>{const e=o??x;return m({value:e,tabValues:s})?e:null})();(0,l.Z)((()=>{j&&d(j)}),[j]);return{selectedValue:a,selectValue:(0,t.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);d(e),h(e),g(e)}),[h,g,s]),tabValues:s}}var g=r(2389);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=r(5893);function y(e){let{className:n,block:r,selectedValue:t,selectValue:a,tabValues:l}=e;const d=[],{blockElementScrollPositionUntilNextRender:o}=(0,s.o5)(),c=e=>{const n=e.currentTarget,r=d.indexOf(n),i=l[r].value;i!==t&&(o(n),a(i))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=d.indexOf(e.currentTarget)+1;n=d[r]??d[0];break}case"ArrowLeft":{const r=d.indexOf(e.currentTarget)-1;n=d[r]??d[d.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},n),children:l.map((e=>{let{value:n,label:r,attributes:s}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>d.push(e),onKeyDown:h,onClick:c,...s,className:(0,i.Z)("tabs__item",j.tabItem,s?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function v(e){let{lazy:n,children:r,selectedValue:i}=e;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function S(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,i.Z)("tabs-container",j.tabList),children:[(0,f.jsx)(y,{...e,...n}),(0,f.jsx)(v,{...e,...n})]})}function b(e){const n=(0,g.Z)();return(0,f.jsx)(S,{...e,children:h(e.children)},String(n))}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>a});var t=r(7294);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);