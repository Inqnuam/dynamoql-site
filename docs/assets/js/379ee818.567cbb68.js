"use strict";(self.webpackChunkdynamo_ql=self.webpackChunkdynamo_ql||[]).push([[8412],{9978:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var r=t(5893),i=t(1151),a=t(4866),s=t(5162);const o={},l=void 0,d={id:"schema/data-types/BigInt",title:"BigInt",description:"Introduction",source:"@site/docs/schema/data-types/03-BigInt.mdx",sourceDirName:"schema/data-types",slug:"/schema/data-types/BigInt",permalink:"/dynamoql-site/docs/schema/data-types/BigInt",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Array",permalink:"/dynamoql-site/docs/schema/data-types/Array"},next:{title:"Boolean",permalink:"/dynamoql-site/docs/schema/data-types/Boolean"}},c={},u=[{value:"Introduction",id:"introduction",level:3},{value:"Define a BigInt",id:"define-a-bigint",level:3},{value:"Options",id:"options",level:3},{value:"- primaryIndex",id:"--primaryindex",level:3},{value:"- sortKey",id:"--sortkey",level:3},{value:"- LSI",id:"--lsi",level:3},{value:"- GSI",id:"--gsi",level:3},{value:"- required",id:"--required",level:3},{value:"- default",id:"--default",level:3},{value:"- validate",id:"--validate",level:3},{value:"- min",id:"--min",level:3},{value:"- max",id:"--max",level:3},{value:"- enum",id:"--enum",level:3},{value:"- set",id:"--set",level:3},{value:"- get",id:"--get",level:3},{value:"- description",id:"--description",level:3},{value:"Condition expression",id:"condition-expression",level:3},{value:"Update expressions",id:"update-expressions",level:3}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"BigInt"}),' represents DynamoDB\'s big Number data type (marshalled as "N") for DynamoQL.']}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"BigInt"})," is almost similar to ",(0,r.jsx)(n.code,{children:"Number"})," type, except it accepts only JS BigInt values.",(0,r.jsx)(n.br,{}),"\n","When reteving an item DynamoDB number type is returned as JS BigInt, even if it may be a number."]})}),"\n",(0,r.jsx)(n.h3,{id:"define-a-bigint",children:"Define a BigInt"}),"\n",(0,r.jsxs)(a.Z,{children:[(0,r.jsx)(s.Z,{value:"dql",label:"DynamoQL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  // highlight-next-line\n  order: BigInt,\n  score: {\n    // highlight-next-line\n    type: BigInt,\n  }\n} as const);\n'})})}),(0,r.jsx)(s.Z,{value:"ts",label:"produced type",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface IUserSchema {\n    id: string,\n    order: bigint,\n    score?: bigint\n}\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,r.jsx)(n.h3,{id:"--primaryindex",children:"- primaryIndex"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,r.jsxs)(n.p,{children:["boolean which markes attribute as HASH key and makes attribute as required, default is ",(0,r.jsx)(n.code,{children:"false"}),".",(0,r.jsx)(n.br,{}),"\n","A Schema can have only one primaryIndex."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  id: {\n    type: BigInt,\n    // highlight-next-line\n    primaryIndex: true,\n  },\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--sortkey",children:"- sortKey"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,r.jsxs)(n.p,{children:["boolean which markes attribute as RANGE key and makes attribute as required, default is ",(0,r.jsx)(n.code,{children:"false"}),".",(0,r.jsx)(n.br,{}),"\n","A Schema can have only one sortKey."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  countryCode: {\n    type: BigInt,\n    primaryIndex: true,\n  },\n  cityCode: {\n    type: BigInt,\n    // highlight-next-line\n    sortKey: true\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--lsi",children:"- LSI"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,r.jsx)(n.p,{children:"defines a Local Secondary Index."}),"\n",(0,r.jsx)(n.p,{children:"LSI option is an object where you must provide:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"indexName"})," which should be unique across the Schema."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"project"})," which may be ",(0,r.jsx)(n.code,{children:"ALL"})," | ",(0,r.jsx)(n.code,{children:"KEYS"})," or  string[] where strings are attriubute names defined in the Schema."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n  },\n  age: {\n    type: BigInt,\n    // highlight-start\n    LSI: {\n        indexName: "age-index",\n        project: "ALL"\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--gsi",children:"- GSI"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,r.jsx)(n.p,{children:"defines a Global Secondary Index."}),"\n",(0,r.jsx)(n.p,{children:"GSI option is an object where you must provide:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"indexName"})," which should be unique across the Schema."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"project"})," which may be ",(0,r.jsx)(n.code,{children:"ALL"})," | ",(0,r.jsx)(n.code,{children:"KEYS"})," or  string[] where strings are attriubute names defined in the Schema."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n  },\n  age: {\n    type: BigInt,\n    // highlight-start\n    GSI: {\n        indexName: "age-index",\n        project: "ALL"\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.p,{children:"for composite table (HASH and RANGE) you must provide another attribute with GSI:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"indexName"})," which must be one of defined GSI indexName."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sortKey"})," true."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n  },\n  age: {\n    type: BigInt,\n    GSI: {\n        // highlight-next-line\n        indexName: "age-index",\n        project: "ALL"\n    }\n  },\n  order: {\n    type: BigInt,\n    GSI: {\n          // highlight-start\n        indexName: "age-index",\n        sortKey: true\n        // highlight-end\n    }\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--required",children:"- required"}),"\n",(0,r.jsxs)(n.p,{children:["boolean which makes attribute as required or optionnal, default is ",(0,r.jsx)(n.code,{children:"false"})," when type is defined with an Object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  score: {\n    type: BigInt,\n    // highlight-next-line\n    required: true\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--default",children:"- default"}),"\n",(0,r.jsxs)(n.p,{children:["To set a default value for an attribute use ",(0,r.jsx)(n.code,{children:"default"})," option."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  score: {\n    type: BigInt,\n    // highlight-next-line\n    default: 5290288293971332n\n  }\n} as const);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["With this configuration when you ",(0,r.jsx)(n.code,{children:"put"})," an Item into your table, your Item will contain score attribute with 5290288293971332n as value."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default"})," must be a BigInt.",(0,r.jsx)(n.br,{}),"\n","Otherwise it will throw an error during dev time and runtime."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n id: {\n   type: String,\n   primaryIndex: true,\n   default: randomUUID\n },\n score: {\n   type: BigInt,\n   // err\n   default: "some-score" // DynamoQLInvalidTypeException: "score" expected to be "N" received "S".\n }\n} as const);\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default"})," can also be a (async) function which accepts one argument (put Item value) and must return a BigInt."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\n// highlight-next-line\nmoderator: Boolean,\nscore: {\n  type: BigInt,\n  // highlight-start\n  default: (item: Record<string, any>)=> {\n      if(item.moderator) {\n          return 123456789012345n\n      }\n      return []\n  }\n  // highlight-end\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--validate",children:"- validate"}),"\n",(0,r.jsxs)(n.p,{children:["validate option allows you to manually validate provided value in ",(0,r.jsx)(n.code,{children:"put"})," and ",(0,r.jsx)(n.code,{children:"update"})," commands.",(0,r.jsx)(n.br,{}),"\n","To return an error you should return a string which explains value invalidity. Any other returned value is considered as valid."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\nscore: {\n  type: BigInt,\n  // highlight-start\n  validate: (self: bigint)=> {\n      if(self > 9999999999999999n) {\n          return "Can not be greater than 9999999999999999n."\n      }\n  }\n  // highlight-end\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--min",children:"- min"}),"\n",(0,r.jsx)(n.p,{children:"define minimum accepted value."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\nscore: {\n  type: BigInt,\n   // highlight-next-line\n  min: 123456780234n // or BigInt(123456780234)\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--max",children:"- max"}),"\n",(0,r.jsx)(n.p,{children:"define maximum accepted value."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\nscore: {\n  type: BigInt,\n   // highlight-next-line\n  max: 123456780234n // or BigInt(123456780234)\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--enum",children:"- enum"}),"\n",(0,r.jsx)(n.p,{children:"define accepted values."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\nscore: {\n  type: BigInt,\n   // highlight-next-line\n  enum: [1111111111111111n, 222222222222222n,]\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--set",children:"- set"}),"\n",(0,r.jsxs)(n.p,{children:["To modify a value before storing it use ",(0,r.jsx)(n.code,{children:"set"})," option.",(0,r.jsx)(n.br,{}),"\n","set (async) function accepts 3 arguments:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"self"})," provided value."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," entier put Item object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"setterInfo"})," an optionnal value provided inside in put, batchPut, batchWrite, transactWrite command's options."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"set"})," will not be called if attribute doesn't exists in put Item object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\nscore: {\n  type: BigInt,\n  // highlight-start\n  set: (self: bigint, item: Record<string, any>, setterInfo?: any)=> {\n\n      if(item.moderator && setterInfo?.someCondition) {\n       return BigInt("12345")\n      }\n\n      return self\n  }\n  // highlight-end\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--get",children:"- get"}),"\n",(0,r.jsx)(n.p,{children:"When reteving an Item we can transform field's value with get option."}),"\n",(0,r.jsx)(n.p,{children:"get (async) function accepts 3 arguments:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"self"})," retrieved value."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," entier retrieved Item object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getterInfo"})," an optionnal value provided inside get, batchGet, transactGet, query, scan command's options."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"get"})," can return anything.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"get"})," will not be called if attribute doesn't exists in stored Item."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\nscore: {\n  type: BigInt,\n  items: String,\n  // highlight-start\n  get: (self: bigint, item: Record<string, any>, getterInfo?: any)=> {\n      if(getterInfo.someCondition) {\n          return null\n      }\n       return self\n  }\n  // highlight-end\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"get"})," returned value's type affects Item type when retriving Item(s) from DynamoDB."]})}),"\n",(0,r.jsx)(n.h3,{id:"--description",children:"- description"}),"\n",(0,r.jsx)(n.p,{children:"add any information to the Schema for your personal usage."}),"\n",(0,r.jsx)(n.h3,{id:"condition-expression",children:"Condition expression"}),"\n",(0,r.jsxs)(n.p,{children:["Same as ",(0,r.jsx)(n.a,{href:"./Number#condition-expression",children:"Number Condition expression"})," except provided values should be BigInt instead of Number."]}),"\n",(0,r.jsx)(n.h3,{id:"update-expressions",children:"Update expressions"}),"\n",(0,r.jsxs)(n.p,{children:["Same as ",(0,r.jsx)(n.a,{href:"./Number#update-expressions",children:"Number Update expressions"})," except provided values should be BigInt instead of Number."]})]})}function m(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>s});t(7294);var r=t(512);const i={tabItem:"tabItem_Ymn6"};var a=t(5893);function s(e){let{children:n,hidden:t,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,s),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>I});var r=t(7294),i=t(512),a=t(2466),s=t(6550),o=t(469),l=t(1980),d=t(7392),c=t(12);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:i}}=e;return{value:n,label:t,attributes:r,default:i}}))}(t);return function(e){const n=(0,d.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const i=(0,s.k6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(i.location.search);n.set(a,e),i.replace({...i.location,search:n.toString()})}),[a,i])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,a=h(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:a}))),[d,u]=p({queryString:t,groupId:i}),[x,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,a]=(0,c.Nk)(t);return[i,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:i}),f=(()=>{const e=d??x;return m({value:e,tabValues:a})?e:null})();(0,o.Z)((()=>{f&&l(f)}),[f]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,a]),tabValues:a}}var g=t(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(5893);function j(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.o5)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),i=o[t].value;i!==r&&(d(n),s(i))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:u,onClick:c,...a,className:(0,i.Z)("tabs__item",f.tabItem,a?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:i}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function b(e){const n=x(e);return(0,y.jsxs)("div",{className:(0,i.Z)("tabs-container",f.tabList),children:[(0,y.jsx)(j,{...e,...n}),(0,y.jsx)(v,{...e,...n})]})}function I(e){const n=(0,g.Z)();return(0,y.jsx)(b,{...e,children:u(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var r=t(7294);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);