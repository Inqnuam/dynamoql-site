"use strict";(self.webpackChunkdynamo_ql=self.webpackChunkdynamo_ql||[]).push([[4378],{2903:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var r=t(5893),s=t(1151),i=t(4866),l=t(5162);const a={},o=void 0,c={id:"schema/data-types/Null",title:"Null",description:'Null represents DynamoDB\'s "NULL" data type.',source:"@site/docs/schema/data-types/07-Null.mdx",sourceDirName:"schema/data-types",slug:"/schema/data-types/Null",permalink:"/dynamoql-site/docs/schema/data-types/Null",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Date",permalink:"/dynamoql-site/docs/schema/data-types/Date"},next:{title:"Number",permalink:"/dynamoql-site/docs/schema/data-types/Number"}},d={},u=[{value:"Options",id:"options",level:3},{value:"- required",id:"--required",level:3},{value:"- default",id:"--default",level:3},{value:"- set",id:"--set",level:3},{value:"- get",id:"--get",level:3},{value:"- description",id:"--description",level:3},{value:"Condition expression",id:"condition-expression",level:3},{value:"- equals",id:"--equals",level:3},{value:"- not equals",id:"--not-equals",level:3},{value:"- attribute exists",id:"--attribute-exists",level:3},{value:"- attribute type",id:"--attribute-type",level:3},{value:"- in",id:"--in",level:3},{value:"Update expressions",id:"update-expressions",level:3},{value:"- set",id:"--set-1",level:3},{value:"- if not exists",id:"--if-not-exists",level:3}];function h(e){const n={admonition:"admonition",br:"br",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Null"}),' represents DynamoDB\'s "NULL" data type.']}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Enable ",(0,r.jsx)(n.code,{children:"strictNullChecks"})," in your tsconfig.json for better type checking and inference."]})}),"\n",(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'// highlight-next-line\nimport { Schema, Null } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  // highlight-next-line\n  isActive: Null,\n  deleted: {\n    // highlight-next-line\n    type: Null\n  }\n} as const);\n'})})}),(0,r.jsx)(l.Z,{value:"jsdoc",label:"JSDoc",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// highlight-next-line\n// @ts-check\n// highlight-next-line\nconst { Schema, Null } = require("dynamoql");\nconst { randomUUID } = require("crypto");\n\n// highlight-next-line\nconst userSchema = new Schema(/** @type {const} */({\n   id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  // highlight-next-line\n  isActive: Null,\n  deleted: {\n    // highlight-next-line\n    type: Null\n  }\n}));\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,r.jsx)(n.h3,{id:"--required",children:"- required"}),"\n",(0,r.jsxs)(n.p,{children:["boolean which makes attribute as required or optionnal, default is ",(0,r.jsx)(n.code,{children:"false"})," when type is defined with an Object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema, Null } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  isActive: {\n    type: Null,\n    // highlight-next-line\n    required: true\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--default",children:"- default"}),"\n",(0,r.jsxs)(n.p,{children:["To set a default value for an attribute use ",(0,r.jsx)(n.code,{children:"default"})," option."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema, Null } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  isActive: {\n    type: Null,\n    // highlight-next-line\n    default: null\n  }\n} as const);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["With this configuration when you ",(0,r.jsx)(n.code,{children:"put"})," an Item into your table, your Item will contain isActive attribute with true as value."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default"})," must be a Null.",(0,r.jsx)(n.br,{}),"\n","Otherwise it will throw an error during dev time and runtime."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema, Null } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n id: {\n   type: String,\n   primaryIndex: true,\n   default: randomUUID\n },\n isActive: {\n   type: Null,\n   // err\n   default: "some-value" // DynamoQLInvalidTypeException: "isActive" expected to be "NULL" received "S".\n }\n} as const);\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default"})," can also be a (async) function which accepts one argument (put Item value) and must return a Null."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema, Null } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\n// highlight-next-line\nmoderator: Boolean,\nisActive: {\n  type: Null,\n  // highlight-start\n  default: (item: Record<string, any>)=> {\n      if(item.moderator) {\n          return false\n      }\n      return false\n  }\n  // highlight-end\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--set",children:"- set"}),"\n",(0,r.jsxs)(n.p,{children:["To modify a value before storing it use ",(0,r.jsx)(n.code,{children:"set"})," option.",(0,r.jsx)(n.br,{}),"\n","set (async) function accepts 3 arguments:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"self"})," provided value."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," entier put Item object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"setterInfo"})," an optionnal value provided inside in put, batchPut, batchWrite, transactWrite command's options."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"set"})," will not be called if attribute doesn't exists in put Item object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema, Null } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\nscore: {\n  type: Null,\n  // highlight-start\n  set: (self: boolean, item: Record<string, any>, setterInfo?: any)=> {\n\n      if(item.moderator && setterInfo?.someCondition) {\n       return undefined\n      }\n\n      return self\n  }\n  // highlight-end\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--get",children:"- get"}),"\n",(0,r.jsx)(n.p,{children:"When reteving an Item we can transform field's value with get option."}),"\n",(0,r.jsx)(n.p,{children:"get (async) function accepts 3 arguments:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"self"})," retrieved value."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," entier retrieved Item object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getterInfo"})," an optionnal value provided inside get, batchGet, transactGet, query, scan command's options."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"get"})," can return anything.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"get"})," will not be called if attribute doesn't exists in stored Item."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema, Null } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\nscore: {\n  type: Null,\n  // highlight-start\n  get: (self: boolean, item: Record<string, any>, getterInfo?: any)=> {\n      if(getterInfo.someCondition) {\n          return {\n            level: 100\n          }\n      }\n       return self\n  }\n  // highlight-end\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"get"})," returned value's type affects Item type when retriving Item(s) from DynamoDB."]})}),"\n",(0,r.jsx)(n.h3,{id:"--description",children:"- description"}),"\n",(0,r.jsx)(n.p,{children:"add any information to the Schema for your personal usage."}),"\n",(0,r.jsx)(n.h3,{id:"condition-expression",children:"Condition expression"}),"\n",(0,r.jsxs)(n.p,{children:["Condition expression are not part of Schema but they are based on your defined Schema.",(0,r.jsx)(n.br,{}),"\n","They are used in various DynamoDB operations to check for some condition(s).",(0,r.jsx)(n.br,{}),"\n","DynamoQL supports all DynamoDB Condition expression."]}),"\n",(0,r.jsx)(n.h3,{id:"--equals",children:"- equals"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  score: null\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  score: {\n    // highlight-next-line\n    $eq: null\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"--not-equals",children:"- not equals"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  score: {\n    // highlight-next-line\n    $neq: null\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"--attribute-exists",children:"- attribute exists"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$exists"})," can be ",(0,r.jsx)(n.code,{children:"true"})," or ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  score: {\n    // highlight-next-line\n    $exists: true\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"--attribute-type",children:"- attribute type"}),"\n",(0,r.jsx)(n.p,{children:"Checks for stored attribute type."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  score: {\n    // highlight-next-line\n    $type: Null\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$type"})," can be String, Number, Boolean, Null, Buffer, Object, Array, or ",(0,r.jsx)(n.code,{children:"{type: Set, items: String | Number | Buffer }"})]}),"\n",(0,r.jsx)(n.h3,{id:"--in",children:"- in"}),"\n",(0,r.jsx)(n.p,{children:"Checks if provided array includes stored value (null)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  score: {\n    // highlight-next-line\n    $in: ["Steve", 214, "Sara", false, null, "John", true, "Mike",]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"update-expressions",children:"Update expressions"}),"\n",(0,r.jsx)(n.p,{children:"Like Condition expression, Update expressions are not part of Schema, but they are based on defined Schema."}),"\n",(0,r.jsxs)(n.p,{children:["Update expressions are used in ",(0,r.jsx)(n.code,{children:"update"}),", ",(0,r.jsx)(n.code,{children:"transactUpdate"})," and ",(0,r.jsx)(n.code,{children:"transactWrite"})," operations."]}),"\n",(0,r.jsx)(n.p,{children:"DynamoQL supports all DynamoDB update operations."}),"\n",(0,r.jsx)(n.h3,{id:"--set-1",children:"- set"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$set"})," replaces stored value by provided value."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  score: {\n    // highlight-next-line\n    $set: null\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"shorthand version is"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  score: null\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"--if-not-exists",children:"- if not exists"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$ifNotExists"})," sets provided value if attribute do not exists in stored item."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  score: {\n    // highlight-next-line\n    $ifNotExists: null\n  }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>l});t(7294);var r=t(512);const s={tabItem:"tabItem_Ymn6"};var i=t(5893);function l(e){let{children:n,hidden:t,className:l}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,l),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>N});var r=t(7294),s=t(512),i=t(2466),l=t(6550),a=t(469),o=t(1980),c=t(7392),d=t(12);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,l.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o._X)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(s.location.search);n.set(i,e),s.replace({...s.location,search:n.toString()})}),[i,s])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,i=h(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[c,u]=m({queryString:t,groupId:s}),[x,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,i]=(0,d.Nk)(t);return[s,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:s}),g=(()=>{const e=c??x;return p({value:e,tabValues:i})?e:null})();(0,a.Z)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),f(e)}),[u,f,i]),tabValues:i}}var f=t(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(5893);function y(e){let{className:n,block:t,selectedValue:r,selectValue:l,tabValues:a}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),d=e=>{const n=e.currentTarget,t=o.indexOf(n),s=a[t].value;s!==r&&(c(n),l(s))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>o.push(e),onKeyDown:u,onClick:d,...i,className:(0,s.Z)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:s}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function v(e){const n=x(e);return(0,j.jsxs)("div",{className:(0,s.Z)("tabs-container",g.tabList),children:[(0,j.jsx)(y,{...e,...n}),(0,j.jsx)(b,{...e,...n})]})}function N(e){const n=(0,f.Z)();return(0,j.jsx)(v,{...e,children:u(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>l});var r=t(7294);const s={},i=r.createContext(s);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);