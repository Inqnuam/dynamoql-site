"use strict";(self.webpackChunkdynamo_ql=self.webpackChunkdynamo_ql||[]).push([[4864],{9528:(e,n,t)=>{t.r(n),t.d(n,{DOMHandler:()=>f,assets:()=>p,contentTitle:()=>h,default:()=>b,frontMatter:()=>u,metadata:()=>m,toc:()=>y});var r=t(5893),a=t(1151),i=t(4866),s=t(5162),o=t(2573);const l="/dynamoql-site/",c=(o.np.github,o.np.dracula,{" Boolean":`${l}docs/schema/data-types/Boolean`," String":`${l}docs/schema/data-types/String`," Number":`${l}docs/schema/data-types/Number`," Array":`${l}docs/schema/data-types/Array`," Set":`${l}docs/schema/data-types/Set`}),d=e=>{const n=c[e.target.innerText];n&&(location.href=n)},u={},h=void 0,m={id:"schema/Define a Schema",title:"Define a Schema",description:"Introduction",source:"@site/docs/schema/Define a Schema.mdx",sourceDirName:"schema",slug:"/schema/Define a Schema",permalink:"/dynamoql-site/docs/schema/Define a Schema",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Schema",permalink:"/dynamoql-site/docs/category/schema"},next:{title:"Any",permalink:"/dynamoql-site/docs/schema/data-types/Any"}},p={},y=[{value:"Introduction",id:"introduction",level:3},{value:"Defining a Schema",id:"defining-a-schema",level:3}],f=({children:e})=>{const n={div:"div",...(0,a.a)()};return(0,r.jsx)(n.div,{onClick:d,children:e})};function g(e){const n={a:"a",br:"br",code:"code",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"To set up a DynamoDB table, it is essential to define a primary index (HASH key) or a primary key consisting of both HASH and SORT keys. Additionally, the table may include secondary indices like Local Secondary Index (LSI) or Global Secondary Index (GSI)."}),"\n",(0,r.jsx)(n.p,{children:"Even when not explicitly creating a table using DynamoQL, it is imperative to specify the Attributes KeySchema using the Schema class exported by the DynamoQL module."}),"\n",(0,r.jsx)(n.p,{children:"The initial and fundamental step in DynamoQL usage is to define a Schema. Regardless of whether you are creating a table or working with existing ones, the Schema provides a crucial structure that ensures consistency in attribute handling. Therefore, defining a Schema is a prerequisite and should be the initial undertaking when embarking on DynamoQL operations."}),"\n",(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(s.Z,{value:"esm",label:"ESM",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\nconst userSchema = new Schema({});\n\n'})})}),(0,r.jsx)(s.Z,{value:"cjs",label:"CJS",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const { Schema } = require("dynamoql");\n\nconst userSchema = new Schema({});\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"When you write this code in your TypeScript-compatible editor (e.g., VSCode), you'll quickly observe that this Schema is currently invalid."}),"\n",(0,r.jsx)(n.p,{children:"As mentioned in the introduction, every DynamoDB Table must have a primary index, a detail we haven't addressed yet. DynamoQL seamlessly integrates with TypeScript/JSDoc to offer you instantaneous feedback during project development, enhancing the development experience."}),"\n",(0,r.jsxs)(n.p,{children:["To define a HASH key explicitly, use the ",(0,r.jsx)(n.code,{children:"primaryIndex"})," property within our Schema. By doing so, you'll not only meet the DynamoDB requirement for a primary index but also effectively soothe the TypeScript Language Server (TLS), ensuring a smoother development process and accurate type checking."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n  },\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Congratulations! You have defined your first Schema."}),"\n",(0,r.jsxs)(n.p,{children:["The corresponding command for defining a HASH key using ",(0,r.jsx)(n.code,{children:"@aws-sdk/client-dynamodb"})," would be:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { CreateTableCommand } from "@aws-sdk/client-dynamodb";\n\nnew CreateTableCommand({\n  ...,\n  AttributeDefinitions: [{ AttributeName: "id", AttributeType: "S" }],\n  KeySchema: [{ AttributeName: "id", KeyType: "HASH" }],\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["DynamoQL's Schema goes beyond merely defining AttributeDefinitions and KeySchema; it extends to offer both development-time and runtime type safety, value transformations, setter/getter functionality, and more.",(0,r.jsx)(n.br,{}),"\n","Unlike tools such as ",(0,r.jsx)(n.a,{href:"https://mongoosejs.com/docs/typescript.html",children:"Mongoose"}),", ",(0,r.jsx)(n.a,{href:"https://sequelize.org/docs/v6/other-topics/typescript/",children:"Sequelize"}),", or ",(0,r.jsx)(n.a,{href:"https://ajv.js.org/guide/typescript.html",children:"AJV"})," when working with TypeScript, there's no need to create an additional interface for your table item entity \u2014 DynamoQL takes care of this task for you seamlessly, even within JavaScript files."]}),"\n",(0,r.jsx)(n.h3,{id:"defining-a-schema",children:"Defining a Schema"}),"\n",(0,r.jsx)(f,{children:(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(s.Z,{value:"ts",label:"TypeScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'import { Schema } from "dynamoql";\n\nconst userSchema = new Schema({\n  id: {\n    // StringType\n    type: String,\n    primaryIndex: true,\n  },\n    // NumberType\n  age: Number,\n  firstname: {\n    // StringType\n    type: String,\n    required: true,\n    capitalize: true\n  },\n  isActive: {\n    // BooleanType\n    type: Boolean,\n  },\n  sex: {\n    // StringType\n    type: String,\n    required: true,\n    enum: ["female", "male"],\n  },\n  friends: {\n    // ArrayType\n    type: Array,\n    // StringType\n    items: String,\n  },\n  data: [Number, String, { type: Set, items: String }]\n  // highlight-next-line\n} as const);\n'})})}),(0,r.jsx)(s.Z,{value:"jsdoc",label:"JSDoc",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const { Schema } = require("dynamoql");\n\nconst userSchema = new Schema(\n  // highlight-next-line\n  /** @type {const} */ ({\n    id: {\n      type: String,\n      primaryIndex: true,\n    },\n    age: Number,\n    firstname: {\n      type: String,\n      required: true,\n      capitalize: true,\n    },\n    isActive: {\n      type: Boolean,\n    },\n    sex: {\n      type: String,\n      required: true,\n      enum: ["female", "male"],\n    },\n    friends: {\n      type: Array,\n      items: String,\n    },\n    data: [Number, String, { type: Set, items: String }],\n  })\n);\n'})})})]})}),"\n",(0,r.jsx)(n.p,{children:"Let's explore what we have declared."}),"\n",(0,r.jsxs)(n.p,{children:["At line #8 we have defined",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"{ age: Number }"}),".",(0,r.jsx)(n.br,{}),"\n","which is is shorthand for",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"{ age: { type: Number, required: true } }"})]}),"\n",(0,r.jsxs)(n.p,{children:["Defining data-type with an object (",(0,r.jsx)(n.code,{children:"{type: ...}"}),") brings you more options. Each DynamoQL data type has its own options.",(0,r.jsx)(n.br,{}),"\n","All fields except those marked as ",(0,r.jsx)(n.code,{children:"primaryIndex"}),", ",(0,r.jsx)(n.code,{children:"sortKey"}),", ",(0,r.jsx)(n.code,{children:"LSI"})," and ",(0,r.jsx)(n.code,{children:"GSI"})," can have multiple data types (example at #26). In TypeScript terminology this is called ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types",children:"union type"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Please note that we marked our Schema ",(0,r.jsx)(n.code,{children:"as const"}),' #28. This helps TLS to consider field "sex" as ',(0,r.jsx)(n.code,{children:"female"})," | ",(0,r.jsx)(n.code,{children:"male"})," instead of any string."]})]})}function b(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>s});t(7294);var r=t(512);const a={tabItem:"tabItem_Ymn6"};var i=t(5893);function s(e){let{children:n,hidden:t,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,s),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>j});var r=t(7294),a=t(512),i=t(2466),s=t(6550),o=t(469),l=t(1980),c=t(7392),d=t(12);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const a=(0,s.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function y(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=h(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[c,u]=p({queryString:t,groupId:a}),[y,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,d.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),g=(()=>{const e=c??y;return m({value:e,tabValues:i})?e:null})();(0,o.Z)((()=>{g&&l(g)}),[g]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,i]),tabValues:i}}var f=t(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(5893);function x(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),a=o[t].value;a!==r&&(c(n),s(a))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:u,onClick:d,...i,className:(0,a.Z)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function S(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function v(e){const n=y(e);return(0,b.jsxs)("div",{className:(0,a.Z)("tabs-container",g.tabList),children:[(0,b.jsx)(x,{...e,...n}),(0,b.jsx)(S,{...e,...n})]})}function j(e){const n=(0,f.Z)();return(0,b.jsx)(v,{...e,children:u(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var r=t(7294);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);