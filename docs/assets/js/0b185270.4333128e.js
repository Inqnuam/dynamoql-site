"use strict";(self.webpackChunkdynamo_ql=self.webpackChunkdynamo_ql||[]).push([[4885],{7394:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var r=s(5893),i=s(1151);const o={},t=void 0,d={id:"FAQ",title:"FAQ",description:"Is DynamoQL production ready ?",source:"@site/docs/FAQ.mdx",sourceDirName:".",slug:"/FAQ",permalink:"/dynamoql-site/docs/FAQ",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Error Handling",permalink:"/dynamoql-site/docs/Error Handling"}},a={},c=[];function l(e){const n={a:"a",br:"br",code:"code",em:"em",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Is DynamoQL production ready ?"}),(0,r.jsxs)(n.p,{children:["Yes.",(0,r.jsx)(n.br,{}),"\n","More than 400 integration and unit tests covers the entier documentation and more.",(0,r.jsx)(n.br,{}),"\n","If you encounter any problem, feel free to open an issue."]})]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Is TypeScript mandatory ?"}),(0,r.jsxs)(n.p,{children:["No.",(0,r.jsx)(n.br,{}),"\n","DynmoQL is completly written in TypeScript to drastically improve developer experience with powerfull suggestions.",(0,r.jsx)(n.br,{}),"\n","DynamoQL works well with both TypeScript and JSDoc out of box."]})]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Is multi-region supported ?"}),(0,r.jsxs)(n.p,{children:["Yes.",(0,r.jsx)(n.br,{}),"\n","DynamoQL initialize DynamoDB client with configration you provide."]})]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Can i use aws-sdk v2 with DynamoQL ?"}),(0,r.jsxs)(n.p,{children:["No.",(0,r.jsx)(n.br,{}),"\n","DynamoQL supports only aws-sdk v3 and there is no plan to support v2."]})]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Can i use DynamoQL in browser ?"}),(0,r.jsxs)(n.p,{children:["Yes, but NodeJS ",(0,r.jsx)(n.code,{children:"Buffer"})," must be pollyfilled.",(0,r.jsx)(n.br,{}),"\n","You can try ",(0,r.jsx)(n.a,{href:"https://github.com/feross/buffer",children:"buffer by feross"})]})]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"How an item is validated ?"}),(0,r.jsx)(n.p,{children:"DynamoQL item validation process starts by walking item properties based on defined Schema."}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["If walker encounters a missing field, it looks for ",(0,r.jsx)(n.code,{children:"default"})," defined in your Schema, if ",(0,r.jsx)(n.code,{children:"default"})," is present then missing field is filled with the ",(0,r.jsx)(n.code,{children:"default"})," value (or ",(0,r.jsx)(n.code,{children:"default"})," functions returned value)."]}),"\n",(0,r.jsxs)(n.li,{children:["walker applies string transformers like ",(0,r.jsx)(n.code,{children:"trim"}),", ",(0,r.jsx)(n.code,{children:"lowercase"}),", ",(0,r.jsx)(n.code,{children:"capitalize"})," etc.."]}),"\n",(0,r.jsxs)(n.li,{children:["walker executes Schema defined ",(0,r.jsx)(n.code,{children:"set"})," functions and applies returned values."]}),"\n",(0,r.jsx)(n.li,{children:"walker looks for missing fields and throws DynamoQLMissingKeyException with details after walking the entier item."}),"\n",(0,r.jsx)(n.li,{children:"walker verifies types and throws DynamoQLInvalidTypeException."}),"\n",(0,r.jsx)(n.li,{children:"walker verifies enums and throws DynamoQLInvalidEnumException."}),"\n",(0,r.jsxs)(n.li,{children:["walker verifies ",(0,r.jsx)(n.code,{children:"min"}),", ",(0,r.jsx)(n.code,{children:"max"}),", ",(0,r.jsx)(n.code,{children:"minLength"}),", ",(0,r.jsx)(n.code,{children:"maxLength"})," and throws DynamoQLInvalidMinMaxException."]}),"\n",(0,r.jsxs)(n.li,{children:["walker executes Schema defined ",(0,r.jsx)(n.code,{children:"validate"})," functions are throws DynamoQLCustomValidatorException."]}),"\n"]})]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Can i trust unknown sources when i use DynamoQL ?"}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Never."})})}),(0,r.jsxs)(n.p,{children:["An attacker using a public API, can change the behaviour of your condition expressions.\nHowever you can reduce attack surface using ",(0,r.jsx)(n.code,{children:"longhand"})," syntax in your condition expressions."]}),(0,r.jsx)(n.p,{children:"a very basic example:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'// pseudo Express route middleware\nconst updateUserRole = (req, res, next) => {\n  await User.update(\n    {\n      id: req.body.userId,\n      // checking password equality with shorthand syntax\n      // highlight-next-line\n      password: req.body.password,\n    },\n    { group: "admin-group" }\n  );\n\n  next();\n};\n'})}),(0,r.jsxs)(n.p,{children:["Now lets imagine ",(0,r.jsx)(n.code,{children:"req.body.password"})," is not a ",(0,r.jsx)(n.em,{children:"string"})," as you may except, but an object like:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  $size: {\n    $gte: 0\n  }\n}\n"})}),(0,r.jsxs)(n.p,{children:["Attacker bypass password checking by producing a ",(0,r.jsx)(n.strong,{children:"string.length >= 0"})," condition."]}),(0,r.jsxs)(n.p,{children:["To prevent injections from unkown sources use ",(0,r.jsx)(n.code,{children:"longthand"})," syntax"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'// pseudo Express route middleware\nconst updateUserRole = (req, res, next) => {\n  await User.update(\n    {\n      id: req.body.userId,\n      // checking password with longthand syntax\n      password: {\n        // highlight-next-line\n        $eq: req.body.password,\n      },\n    },\n    { group: "admin-group" }\n  );\n\n  next();\n};\n'})})]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Can I use multiple models with the same table name ?"}),(0,r.jsxs)(n.p,{children:["Yes.",(0,r.jsx)(n.br,{}),"\n","Nothing prevents you to use the same table name with different Models as long as ",(0,r.jsx)(n.code,{children:"primaryIndex"}),", ",(0,r.jsx)(n.code,{children:"sortKey"}),", ",(0,r.jsx)(n.code,{children:"LSI"})," and ",(0,r.jsx)(n.code,{children:"GSI"})," are identical."]})]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Can I use DynamoQL with an already existing project ?"}),(0,r.jsxs)(n.p,{children:["Yes.",(0,r.jsx)(n.br,{}),"\n","However you should ensure Schema definition meets your stored items types."]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>t});var r=s(7294);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);