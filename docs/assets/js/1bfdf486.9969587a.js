"use strict";(self.webpackChunkdynamo_ql=self.webpackChunkdynamo_ql||[]).push([[554],{2929:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var i=r(5893),t=r(1151),a=r(4866),s=r(5162);const l={},o=void 0,d={id:"schema/data-types/Buffer",title:"Buffer",description:"Introduction",source:"@site/docs/schema/data-types/05-Buffer.mdx",sourceDirName:"schema/data-types",slug:"/schema/data-types/Buffer",permalink:"/dynamoql-site/docs/schema/data-types/Buffer",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Boolean",permalink:"/dynamoql-site/docs/schema/data-types/Boolean"},next:{title:"Date",permalink:"/dynamoql-site/docs/schema/data-types/Date"}},c={},h=[{value:"Introduction",id:"introduction",level:3},{value:"Define a Buffer",id:"define-a-buffer",level:3},{value:"Options",id:"options",level:3},{value:"- primaryIndex",id:"--primaryindex",level:3},{value:"- sortKey",id:"--sortkey",level:3},{value:"- LSI",id:"--lsi",level:3},{value:"- GSI",id:"--gsi",level:3},{value:"- required",id:"--required",level:3},{value:"- default",id:"--default",level:3},{value:"- validate",id:"--validate",level:3},{value:"- min",id:"--min",level:3},{value:"- max",id:"--max",level:3},{value:"- set",id:"--set",level:3},{value:"- get",id:"--get",level:3},{value:"- description",id:"--description",level:3},{value:"Condition expression",id:"condition-expression",level:3},{value:"- equals",id:"--equals",level:3},{value:"- not equals",id:"--not-equals",level:3},{value:"- attribute exists",id:"--attribute-exists",level:3},{value:"- includes",id:"--includes",level:3},{value:"- binary length",id:"--binary-length",level:3},{value:"- attribute type",id:"--attribute-type",level:3},{value:"- starts with",id:"--starts-with",level:3},{value:"- greather than",id:"--greather-than",level:3},{value:"- greather than or equal",id:"--greather-than-or-equal",level:3},{value:"- little than",id:"--little-than",level:3},{value:"- little than or equal",id:"--little-than-or-equal",level:3},{value:"- between",id:"--between",level:3},{value:"- in",id:"--in",level:3},{value:"- AND",id:"--and",level:3},{value:"- OR",id:"--or",level:3},{value:"- NOT",id:"--not",level:3},{value:"Update expressions",id:"update-expressions",level:3},{value:"- set",id:"--set-1",level:3},{value:"- if not exists",id:"--if-not-exists",level:3}];function u(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Buffer"}),' represents DynamoDB\'s Binary data type (marshalled as "B").']}),"\n",(0,i.jsxs)(n.p,{children:["When storing an Item, ",(0,i.jsx)(n.code,{children:"Buffer"})," attribute accept following types:"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ArrayBuffer"})," ",(0,i.jsx)(n.code,{children:"Blob"})," ",(0,i.jsx)(n.code,{children:"Buffer"})," ",(0,i.jsx)(n.code,{children:"DataView"})," ",(0,i.jsx)(n.code,{children:"File"})," ",(0,i.jsx)(n.code,{children:"Int8Array"})," ",(0,i.jsx)(n.code,{children:"Uint8Array"})," ",(0,i.jsx)(n.code,{children:"Uint8ClampedArray"})," ",(0,i.jsx)(n.code,{children:"Int16Array"})," ",(0,i.jsx)(n.code,{children:"Uint16Array"})," ",(0,i.jsx)(n.code,{children:"Int32Array"})," ",(0,i.jsx)(n.code,{children:"Uint32Array"})," ",(0,i.jsx)(n.code,{children:"Float32Array"})," ",(0,i.jsx)(n.code,{children:"Float64Array"})," ",(0,i.jsx)(n.code,{children:"BigInt64Array"})," ",(0,i.jsx)(n.code,{children:"BigUint64Array"})]}),"\n",(0,i.jsxs)(n.p,{children:["However when retrieved it is always a ",(0,i.jsx)(n.code,{children:"Buffer"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"define-a-buffer",children:"Define a Buffer"}),"\n",(0,i.jsxs)(a.Z,{children:[(0,i.jsx)(s.Z,{value:"dql",label:"DynamoQL",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  // highlight-next-line\n  order: Buffer,\n  score: {\n    // highlight-next-line\n    type: Buffer,\n  }\n} as const);\n'})})}),(0,i.jsx)(s.Z,{value:"ts",label:"produced type",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"interface IUserSchema {\n    id: string,\n    order: Buffer,\n    score?: Buffer\n}\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,i.jsx)(n.h3,{id:"--primaryindex",children:"- primaryIndex"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,i.jsxs)(n.p,{children:["boolean which markes attribute as HASH key and makes attribute as required, default is ",(0,i.jsx)(n.code,{children:"false"}),".",(0,i.jsx)(n.br,{}),"\n","A Schema can have only one primaryIndex."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  id: {\n    type: Buffer,\n    // highlight-next-line\n    primaryIndex: true,\n  },\n} as const);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--sortkey",children:"- sortKey"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,i.jsxs)(n.p,{children:["boolean which markes attribute as RANGE key and makes attribute as required, default is ",(0,i.jsx)(n.code,{children:"false"}),".",(0,i.jsx)(n.br,{}),"\n","A Schema can have only one sortKey."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  countryCode: {\n    type: Buffer,\n    primaryIndex: true,\n  },\n  cityCode: {\n    type: Buffer,\n    // highlight-next-line\n    sortKey: true\n  }\n} as const);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--lsi",children:"- LSI"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,i.jsx)(n.p,{children:"defines a Local Secondary Index."}),"\n",(0,i.jsx)(n.p,{children:"LSI option is an object where you must provide:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"indexName"})," which should be unique across the Schema."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"project"})," which may be ",(0,i.jsx)(n.code,{children:"ALL"})," | ",(0,i.jsx)(n.code,{children:"KEYS"})," or  string[] where strings are attriubute names defined in the Schema."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n  },\n  image: {\n    type: Buffer,\n    // highlight-start\n    LSI: {\n        indexName: "image-index",\n        project: "ALL"\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--gsi",children:"- GSI"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,i.jsx)(n.p,{children:"defines a Global Secondary Index."}),"\n",(0,i.jsx)(n.p,{children:"GSI option is an object where you must provide:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"indexName"})," which should be unique across the Schema."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"project"})," which may be ",(0,i.jsx)(n.code,{children:"ALL"})," | ",(0,i.jsx)(n.code,{children:"KEYS"})," or  string[] where strings are attriubute names defined in the Schema."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n  },\n  image: {\n    type: Buffer,\n    // highlight-start\n    GSI: {\n        indexName: "image-index",\n        project: "ALL"\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,i.jsx)(n.p,{children:"for composite table (HASH and RANGE) you must provide another attribute with GSI:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"indexName"})," which must be one of defined GSI indexName."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sortKey"})," true."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n  },\n  image: {\n    type: Buffer,\n    GSI: {\n        // highlight-next-line\n        indexName: "image-index",\n        project: "ALL"\n    }\n  },\n  order: {\n    type: Buffer,\n    GSI: {\n          // highlight-start\n        indexName: "image-index",\n        sortKey: true\n        // highlight-end\n    }\n  }\n} as const);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--required",children:"- required"}),"\n",(0,i.jsxs)(n.p,{children:["boolean which makes attribute as required or optionnal, default is ",(0,i.jsx)(n.code,{children:"false"})," when type is defined with an Object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  score: {\n    type: Buffer,\n    // highlight-next-line\n    required: true\n  }\n} as const);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--default",children:"- default"}),"\n",(0,i.jsxs)(n.p,{children:["To set a default value for an attribute use ",(0,i.jsx)(n.code,{children:"default"})," option."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  score: {\n    type: Buffer,\n    // highlight-next-line\n    default: Buffer.from("Hello WORLD")\n  }\n} as const);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["With this configuration when you ",(0,i.jsx)(n.code,{children:"put"})," an Item into your table, your Item will contain score attribute with 5 as value."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"default"})," must be a Buffer.",(0,i.jsx)(n.br,{}),"\n","Otherwise it will throw an error during dev time and runtime."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  score: {\n    type: Buffer,\n    // err\n    default: "some-score" // DynamoQLInvalidTypeException: "score" expected to be "B" received "S".\n  }\n} as const);\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"default"})," can also be a (async) function which accepts one argument (put Item value) and must return a Buffer."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  // highlight-next-line\n  moderator: Boolean,\n  score: {\n    type: Buffer,\n    // highlight-start\n    default: (item: Record<string, any>)=> {\n        if(item.moderator) {\n            return Buffer.from(item.id)\n        }\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--validate",children:"- validate"}),"\n",(0,i.jsxs)(n.p,{children:["validate option allows you to manually validate provided value in ",(0,i.jsx)(n.code,{children:"put"})," and ",(0,i.jsx)(n.code,{children:"update"})," commands.",(0,i.jsx)(n.br,{}),"\n","To return an error you should return a string which explains value invalidity. Any other returned value is considered as valid."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  moderator: Boolean,\n  image: {\n    type: Buffer,\n    // highlight-start\n    validate: (self: Buffer)=> {\n        if(self.byteLength < 10) {\n            return "Invalid image"\n        }\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--min",children:"- min"}),"\n",(0,i.jsx)(n.p,{children:"define minimum binary size."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  moderator: Boolean,\n  score: {\n    type: Buffer,\n     // highlight-next-line\n    min: 1\n  }\n} as const);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--max",children:"- max"}),"\n",(0,i.jsx)(n.p,{children:"define maximum binary size."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  moderator: Boolean,\n  score: {\n    type: Buffer,\n     // highlight-next-line\n    max: 89\n  }\n} as const);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--set",children:"- set"}),"\n",(0,i.jsxs)(n.p,{children:["To modify a value before storing it use ",(0,i.jsx)(n.code,{children:"set"})," option.",(0,i.jsx)(n.br,{}),"\n","set (async) function accepts 3 arguments:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"self"})," provided value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"item"})," entier put Item object."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setterInfo"})," an optionnal value provided inside in put, batchPut, batchWrite, transactWrite command's options."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"set"})," will not be called if attribute doesn't exists in put Item object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  moderator: Boolean,\n  score: {\n    type: Buffer,\n    // highlight-start\n    set: (self: Buffer, item: Record<string, any>, setterInfo?: any)=> {\n\n        if(item.moderator && setterInfo?.someCondition) {\n         return Buffer.from("Hello WORLD")\n        }\n\n        return self\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--get",children:"- get"}),"\n",(0,i.jsx)(n.p,{children:"When reteving an Item we can transform field's value with get option."}),"\n",(0,i.jsx)(n.p,{children:"get (async) function accepts 3 arguments:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"self"})," retrieved value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"item"})," entier retrieved Item object."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getterInfo"})," an optionnal value provided inside get, batchGet, transactGet, query, scan command's options."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"get"})," can return anything.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:"get"})," will not be called if attribute doesn't exists in stored Item."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  moderator: Boolean,\n  image: {\n    type: Buffer,\n    items: String,\n    // highlight-start\n    get: (self: Buffer, item: Record<string, any>, getterInfo?: any)=> {\n        if(getterInfo.someCondition) {\n            return {\n                format: "png",\n                size: self.byteLength\n            }\n        }\n         return self\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"get"})," returned value's type affects Item type when retriving Item(s) from DynamoDB."]})}),"\n",(0,i.jsx)(n.h3,{id:"--description",children:"- description"}),"\n",(0,i.jsx)(n.p,{children:"add any information to the Schema for your personal usage."}),"\n",(0,i.jsx)(n.h3,{id:"condition-expression",children:"Condition expression"}),"\n",(0,i.jsxs)(n.p,{children:["Condition expression are not part of Schema but they are based on your defined Schema.",(0,i.jsx)(n.br,{}),"\n","They are used in various DynamoDB operations to check for some condition(s).",(0,i.jsx)(n.br,{}),"\n","DynamoQL supports all DynamoDB Condition expression."]}),"\n",(0,i.jsx)(n.h3,{id:"--equals",children:"- equals"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: Buffer.from("image:png")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-next-line\n    $eq: Buffer.from("image:png")\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--not-equals",children:"- not equals"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-next-line\n    $neq: Buffer.from("image:png")\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--attribute-exists",children:"- attribute exists"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$exists"})," can be ",(0,i.jsx)(n.code,{children:"true"})," or ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:"{\n  image: {\n    // highlight-next-line\n    $exists: true\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"--includes",children:"- includes"}),"\n",(0,i.jsx)(n.p,{children:"Checks if stored binary value contains provided value."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-next-line\n    $includes: Buffer.from("png")\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--binary-length",children:"- binary length"}),"\n",(0,i.jsx)(n.p,{children:"Checks for stored binary value's length."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:"{\n  image: {\n    // highlight-next-line\n    $size: 1024\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$size"})," can also be any valid numeric comparison operator."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:"{\n  image: {\n    $size: {\n      // highlight-next-line\n      $gt: 1024\n    }\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Possible operators are ",(0,i.jsx)(n.a,{href:"./Number#--equals",children:"$eq"}),", ",(0,i.jsx)(n.a,{href:"./Number#--not-equals",children:"$neq"}),", ",(0,i.jsx)(n.a,{href:"./Number#--greather-than",children:"$gt"}),", ",(0,i.jsx)(n.a,{href:"./Number#--greather-than-or-equal",children:"$gte"}),", ",(0,i.jsx)(n.a,{href:"./Number#--little-than",children:"$lt"}),", ",(0,i.jsx)(n.a,{href:"./Number#--little-than-or-equal",children:"$lte"}),", ",(0,i.jsx)(n.a,{href:"./Number#--in",children:"$in"}),", ",(0,i.jsx)(n.a,{href:"./Number#--between",children:"$between"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"--attribute-type",children:"- attribute type"}),"\n",(0,i.jsx)(n.p,{children:"Checks for stored attribute type."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:"{\n  image: {\n    // highlight-next-line\n    $type: Buffer\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$type"})," can be String, Number, Boolean, Null, Buffer, Object, Array, or ",(0,i.jsx)(n.code,{children:"{type: Set, items: String | Number | Buffer }"})]}),"\n",(0,i.jsx)(n.h3,{id:"--starts-with",children:"- starts with"}),"\n",(0,i.jsx)(n.p,{children:"Checks if stored binary value starts with provided value."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-next-line\n    $startsWith: Buffer.from("image:gif")\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--greather-than",children:"- greather than"}),"\n",(0,i.jsx)(n.p,{children:"Lexicographically compares if stored binary value is greather than provided value."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-next-line\n    $gt: "Joh"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--greather-than-or-equal",children:"- greather than or equal"}),"\n",(0,i.jsx)(n.p,{children:"Lexicographically compares if stored binary value is greather than or equal provided value."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-next-line\n    $gte: "Joh"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--little-than",children:"- little than"}),"\n",(0,i.jsx)(n.p,{children:"Lexicographically compares if stored binary value is little than provided value."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-next-line\n    $lt: "Joh"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--little-than-or-equal",children:"- little than or equal"}),"\n",(0,i.jsx)(n.p,{children:"Lexicographically compares if stored binary value is little than or equal provided value."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-next-line\n    $lte: "Joh"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--between",children:"- between"}),"\n",(0,i.jsxs)(n.p,{children:["Lexicographically compares if stored binary value is greather than or equal ",(0,i.jsx)(n.code,{children:"value1"})," AND is little than or equal ",(0,i.jsx)(n.code,{children:"value2"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:"{\n  image: {\n    // highlight-next-line\n    $between: [value1, value2]\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"--in",children:"- in"}),"\n",(0,i.jsx)(n.p,{children:"Checks if provided array includes stored binary value."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-next-line\n    $in: ["Steve", 214, "Sara", false, Buffer.from("image:png"), "Mike", null]\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--and",children:"- AND"}),"\n",(0,i.jsx)(n.p,{children:"Checks for multiple conditions. Condition is valid if ALL specified conditions are satisfied."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-start\n    $and: [\n      {\n        $size: 4\n      },\n      {\n        $includes: Buffer.from("png")\n      }\n    ]\n    // highlight-end\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"shorthand style"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    $size: 4,\n    $includes: Buffer.from("png")\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--or",children:"- OR"}),"\n",(0,i.jsx)(n.p,{children:"Checks for multiple conditions. Condition is valid if at least one of specified conditions is satisfied."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-start\n    $or: [\n      {\n        $size: 6\n      },\n      {\n        $includes: Buffer.from("png")\n      }\n    ]\n     // highlight-end\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--not",children:"- NOT"}),"\n",(0,i.jsx)(n.p,{children:"Condition is valid if specified condition is NOT satisfied."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-next-line\n    $not: {\n      $includes: Buffer.from("png")\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$not"})," accepts any Condition expression."]}),"\n",(0,i.jsx)(n.p,{children:"When multiple conditions are provided inside $not: {} they are considered as $and condition."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    $not: {\n      // highlight-start\n      $size: 6,\n      $includes: Buffer.from("png")\n      // highlight-end\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"longhand equivalent is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    $not: {\n      // highlight-start\n      $and: [\n        {\n          $size: 6\n        },\n        {\n          $includes: Buffer.from("png")\n        }\n      ]\n      // highlight-end\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["To improve developper experience, when ",(0,i.jsx)(n.code,{children:"ArrayBuffer"})," ",(0,i.jsx)(n.code,{children:"Blob"})," ",(0,i.jsx)(n.code,{children:"DataView"})," or ",(0,i.jsx)(n.code,{children:"File"})," are used inside Conditionnal or Update expressions, intentionnally TS will complain about provided value type.",(0,i.jsx)(n.br,{}),"\n","They are still valid types and you can safely ignore TS error message with // @ts-ignore."]})}),"\n",(0,i.jsx)(n.h3,{id:"update-expressions",children:"Update expressions"}),"\n",(0,i.jsx)(n.p,{children:"Like Condition expression, Update expressions are not part of Schema, but they are based on defined Schema."}),"\n",(0,i.jsxs)(n.p,{children:["Update expressions are used in ",(0,i.jsx)(n.code,{children:"update"}),", ",(0,i.jsx)(n.code,{children:"transactUpdate"})," and ",(0,i.jsx)(n.code,{children:"transactWrite"})," operations."]}),"\n",(0,i.jsx)(n.p,{children:"DynamoQL supports all DynamoDB update operations."}),"\n",(0,i.jsx)(n.h3,{id:"--set-1",children:"- set"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$set"})," replaces stored binary value by provided binary value."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-next-line\n    $set: Buffer.from("image:png")\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"shorthand version is"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: Buffer.from("image:png")\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"--if-not-exists",children:"- if not exists"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$ifNotExists"})," sets provided binary value if attribute do not exists in stored item.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:"$ifNotExists"})," dont affects Condition expression and is attribute specific.",(0,i.jsx)(n.br,{}),"\n","If attribute exists, stored value stays unchanged."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  image: {\n    // highlight-next-line\n    $ifNotExists: Buffer.from("image:png")\n  }\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},5162:(e,n,r)=>{r.d(n,{Z:()=>s});r(7294);var i=r(512);const t={tabItem:"tabItem_Ymn6"};var a=r(5893);function s(e){let{children:n,hidden:r,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.Z)(t.tabItem,s),hidden:r,children:n})}},4866:(e,n,r)=>{r.d(n,{Z:()=>S});var i=r(7294),t=r(512),a=r(2466),s=r(6550),l=r(469),o=r(1980),d=r(7392),c=r(12);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:r,attributes:i,default:t}}=e;return{value:n,label:r,attributes:i,default:t}}))}(r);return function(e){const n=(0,d.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function m(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:r}=e;const t=(0,s.k6)(),a=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,o._X)(a),(0,i.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})}),[a,t])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:t}=e,a=u(e),[s,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=r.find((e=>e.default))??r[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[d,h]=p({queryString:r,groupId:t}),[x,f]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,a]=(0,c.Nk)(r);return[t,(0,i.useCallback)((e=>{r&&a.set(e)}),[r,a])]}({groupId:t}),g=(()=>{const e=d??x;return m({value:e,tabValues:a})?e:null})();(0,l.Z)((()=>{g&&o(g)}),[g]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),f(e)}),[h,f,a]),tabValues:a}}var f=r(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=r(5893);function y(e){let{className:n,block:r,selectedValue:i,selectValue:s,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.o5)(),c=e=>{const n=e.currentTarget,r=o.indexOf(n),t=l[r].value;t!==i&&(d(n),s(t))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;n=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;n=o[r]??o[o.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.Z)("tabs",{"tabs--block":r},n),children:l.map((e=>{let{value:n,label:r,attributes:a}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>o.push(e),onKeyDown:h,onClick:c,...a,className:(0,t.Z)("tabs__item",g.tabItem,a?.className,{"tabs__item--active":i===n}),children:r??n},n)}))})}function v(e){let{lazy:n,children:r,selectedValue:t}=e;const a=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===t));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function b(e){const n=x(e);return(0,j.jsxs)("div",{className:(0,t.Z)("tabs-container",g.tabList),children:[(0,j.jsx)(y,{...e,...n}),(0,j.jsx)(v,{...e,...n})]})}function S(e){const n=(0,f.Z)();return(0,j.jsx)(b,{...e,children:h(e.children)},String(n))}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>s});var i=r(7294);const t={},a=i.createContext(t);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);