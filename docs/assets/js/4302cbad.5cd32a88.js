"use strict";(self.webpackChunkdynamo_ql=self.webpackChunkdynamo_ql||[]).push([[6530],{4706:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>d,metadata:()=>o,toc:()=>h});var r=t(5893),a=t(1151),i=t(4866),s=t(5162);const d={},l=void 0,o={id:"schema/data-types/Date",title:"Date",description:"Introduction",source:"@site/docs/schema/data-types/06-Date.mdx",sourceDirName:"schema/data-types",slug:"/schema/data-types/Date",permalink:"/dynamoql-site/docs/schema/data-types/Date",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Buffer",permalink:"/dynamoql-site/docs/schema/data-types/Buffer"},next:{title:"Null",permalink:"/dynamoql-site/docs/schema/data-types/Null"}},c={},h=[{value:"Introduction",id:"introduction",level:3},{value:"Define a Date",id:"define-a-date",level:3},{value:"Options",id:"options",level:3},{value:"- primaryIndex",id:"--primaryindex",level:3},{value:"- sortKey",id:"--sortkey",level:3},{value:"- LSI",id:"--lsi",level:3},{value:"- GSI",id:"--gsi",level:3},{value:"- required",id:"--required",level:3},{value:"- default",id:"--default",level:3},{value:"- format",id:"--format",level:3},{value:"- validate",id:"--validate",level:3},{value:"- min",id:"--min",level:3},{value:"- max",id:"--max",level:3},{value:"- set",id:"--set",level:3},{value:"- get",id:"--get",level:3},{value:"- description",id:"--description",level:3},{value:"Condition expression",id:"condition-expression",level:3},{value:"Update expressions",id:"update-expressions",level:3},{value:"- set",id:"--set-1",level:3},{value:"- if not exists",id:"--if-not-exists",level:3},{value:"- increase / decrease",id:"--increase--decrease",level:3}];function u(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Date"})," is DynamoQL specific type.",(0,r.jsx)(n.br,{}),"\n","Dates are stored as Number timestamp or in EPOCH format."]}),"\n",(0,r.jsx)(n.p,{children:"Accepted values for Date type fields are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Date instance"}),"\n",(0,r.jsx)(n.li,{children:"number"}),"\n",(0,r.jsx)(n.li,{children:"valid date string"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"When reteving items, Date type attribute always returns a Date instance instead of stored number value."}),"\n",(0,r.jsx)(n.h3,{id:"define-a-date",children:"Define a Date"}),"\n",(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(s.Z,{value:"dql",label:"DynamoQL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  // highlight-next-line\n  order: Date,\n  createdDate: {\n    // highlight-next-line\n    type: Date,\n  }\n} as const);\n'})})}),(0,r.jsx)(s.Z,{value:"ts",label:"produced type",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface IUserSchema {\n    id: string,\n    order: Date,\n    createdDate?: Date\n}\n"})})})]}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsxs)(n.p,{children:["Never use ",(0,r.jsx)(n.code,{children:"Date"})," type in ",(0,r.jsx)(n.code,{children:"union"})," type which already includes ",(0,r.jsx)(n.code,{children:"Number"})," type.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"Date"})," being stored as number, predicting the correct type is not possible and will lead to unexpected behaviour."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  // err\n  order: [Number, Date], // this is bad!\n} as const);\n'})})]}),"\n",(0,r.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,r.jsx)(n.h3,{id:"--primaryindex",children:"- primaryIndex"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,r.jsxs)(n.p,{children:["boolean which markes attribute as HASH key and makes attribute as required, default is ",(0,r.jsx)(n.code,{children:"false"}),".",(0,r.jsx)(n.br,{}),"\n","A Schema can have only one primaryIndex."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  id: {\n    type: Date,\n    // highlight-next-line\n    primaryIndex: true,\n  },\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--sortkey",children:"- sortKey"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,r.jsxs)(n.p,{children:["boolean which markes attribute as RANGE key and makes attribute as required, default is ",(0,r.jsx)(n.code,{children:"false"}),".",(0,r.jsx)(n.br,{}),"\n","A Schema can have only one sortKey."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  createdDate: {\n    type: Date,\n    primaryIndex: true,\n  },\n  lastLogin: {\n    type: Date,\n    // highlight-next-line\n    sortKey: true\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--lsi",children:"- LSI"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,r.jsx)(n.p,{children:"defines a Local Secondary Index."}),"\n",(0,r.jsx)(n.p,{children:"LSI option is an object where you must provide:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"indexName"})," which should be unique across the Schema."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"project"})," which may be ",(0,r.jsx)(n.code,{children:"ALL"})," | ",(0,r.jsx)(n.code,{children:"KEYS"})," or  string[] where strings are attriubute names defined in the Schema."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n  },\n  age: {\n    type: Date,\n    // highlight-start\n    LSI: {\n        indexName: "age-index",\n        project: "ALL"\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--gsi",children:"- GSI"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"top-level only"})}),"\n",(0,r.jsx)(n.p,{children:"defines a Global Secondary Index."}),"\n",(0,r.jsx)(n.p,{children:"GSI option is an object where you must provide:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"indexName"})," which should be unique across the Schema."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"project"})," which may be ",(0,r.jsx)(n.code,{children:"ALL"})," | ",(0,r.jsx)(n.code,{children:"KEYS"})," or  string[] where strings are attriubute names defined in the Schema."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n  },\n  age: {\n    type: Date,\n    // highlight-start\n    GSI: {\n        indexName: "age-index",\n        project: "ALL"\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.p,{children:"for composite table (HASH and RANGE) you must provide another attribute with GSI:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"indexName"})," which must be one of defined GSI indexName."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sortKey"})," true."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n  },\n  age: {\n    type: Date,\n    GSI: {\n        // highlight-next-line\n        indexName: "age-index",\n        project: "ALL"\n    }\n  },\n  order: {\n    type: Date,\n    GSI: {\n          // highlight-start\n        indexName: "age-index",\n        sortKey: true\n        // highlight-end\n    }\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--required",children:"- required"}),"\n",(0,r.jsxs)(n.p,{children:["boolean which makes attribute as required or optionnal, default is ",(0,r.jsx)(n.code,{children:"false"})," when type is defined with an Object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  createdDate: {\n    type: Date,\n    // highlight-next-line\n    required: true\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--default",children:"- default"}),"\n",(0,r.jsxs)(n.p,{children:["To set a default value for an attribute use ",(0,r.jsx)(n.code,{children:"default"})," option."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  createdDate: {\n    type: Date,\n    // highlight-next-line\n    default: new Date("2023")\n  }\n} as const);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["With this configuration when you ",(0,r.jsx)(n.code,{children:"put"}),' an Item into your table, your Item will contain createdDate attribute with new Date("2023").getTime() returned value.']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default"})," must be a valid date.",(0,r.jsx)(n.br,{}),"\n","Otherwise it will throw an error during dev time and runtime."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n id: {\n   type: String,\n   primaryIndex: true,\n   default: randomUUID\n },\n createdDate: {\n   type: Date,\n   // err\n   default: "some-createdDate" // DynamoQLInvalidTypeException: "createdDate" expected to be "N" received "S".\n }\n} as const);\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default"})," can also be a (async) function which accepts one argument (put Item value) and must return a Date."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\ncreatedDate: {\n  type: Date,\n  // highlight-next-line\n  default: Date.now\n},\nupdatedDate: {\n  type: Date,\n  // highlight-start\n  default: (item: Record<string, any>)=> {\n    if(item.someCondition) {\n      return new Date("2014")\n    }\n  }\n  // highlight-end\n}\n} as const)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--format",children:"- format"}),"\n",(0,r.jsxs)(n.p,{children:["directive to store date as JS ",(0,r.jsx)(n.code,{children:"timestamp"})," (with milliseconds) or as ",(0,r.jsx)(n.code,{children:"EPOCH"})," (without milliseconds).",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"EPOCH"})," is specialy usefull when working with DynamoDB TTL.",(0,r.jsx)(n.br,{}),"\n","default value is ",(0,r.jsx)(n.code,{children:"timestamp"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  ttl: {\n    type: Date,\n     // highlight-next-line\n    format: "EPOCH",\n    default: ()=> {\n        const deleteDate = new Date();\n        deleteDate.setFullYear(deleteDate.getFullYear() + 2)\n\n        return deleteDate\n    }\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.p,{children:"With the example above, when you put in an Item, your Item will be deleted after 2 years if TTL is enabled for your Table."}),"\n",(0,r.jsx)(n.h3,{id:"--validate",children:"- validate"}),"\n",(0,r.jsxs)(n.p,{children:["validate option allows you to manually validate provided value in ",(0,r.jsx)(n.code,{children:"put"})," and ",(0,r.jsx)(n.code,{children:"update"})," commands.",(0,r.jsx)(n.br,{}),"\n","To return an error you should return a string which explains value invalidity. Any other returned value is considered as valid."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\ncreatedDate: {\n  type: Date,\n  // highlight-start\n  validate: (self: Date)=> {\n      if(self > new Date("2019")) {\n          return "Can not be greater than 2019."\n      }\n  }\n  // highlight-end\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--min",children:"- min"}),"\n",(0,r.jsx)(n.p,{children:"define minimum accepted value."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\ncreatedDate: {\n  type: Date,\n   // highlight-next-line\n  min: new Date("2015")\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--max",children:"- max"}),"\n",(0,r.jsx)(n.p,{children:"define maximum accepted value."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\ncreatedDate: {\n  type: Date,\n   // highlight-next-line\n  max: new Date("2034")\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--set",children:"- set"}),"\n",(0,r.jsxs)(n.p,{children:["To modify a value before storing it use ",(0,r.jsx)(n.code,{children:"set"})," option.",(0,r.jsx)(n.br,{}),"\n","set (async) function accepts 3 arguments:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"self"})," provided value."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," entier put Item object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"setterInfo"})," an optionnal value provided inside in put, batchPut, batchWrite, transactWrite command's options."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"set"})," will not be called if attribute doesn't exists in put Item object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\ndeleted: Boolean,\nttl: {\n  type: Date,\n  // highlight-start\n  set: (self: Date, item: Record<string, any>, setterInfo?: any)=> {\n\n      if(item.deleted) {\n       const deleteDate = new Date();\n        deleteDate.setFullYear(deleteDate.getFullYear() + 2)\n\n      return deleteDate\n      }\n\n      return undefined\n  }\n  // highlight-end\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--get",children:"- get"}),"\n",(0,r.jsx)(n.p,{children:"When reteving an Item we can transform field's value with get option."}),"\n",(0,r.jsx)(n.p,{children:"get (async) function accepts 3 arguments:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"self"})," retrieved value."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," entier retrieved Item object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getterInfo"})," an optionnal value provided inside get, batchGet, transactGet, query, scan command's options."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"get"})," can return anything.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"get"})," will not be called if attribute doesn't exists in stored Item."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\n const userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  moderator: Boolean,\n  birthday: {\n    type: Date,\n    // highlight-start\n    get: (self: Date, item: Record<string, any>, getterInfo?: any)=> {\n        if(getterInfo.forFrontend) {\n            return self.toISOString()\n        }\n         return self\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"get"})," returned value's type affects Item type when retriving Item(s) from DynamoDB."]})}),"\n",(0,r.jsx)(n.h3,{id:"--description",children:"- description"}),"\n",(0,r.jsx)(n.p,{children:"add any information to the Schema for your personal usage."}),"\n",(0,r.jsx)(n.h3,{id:"condition-expression",children:"Condition expression"}),"\n",(0,r.jsxs)(n.p,{children:["Same as ",(0,r.jsx)(n.a,{href:"./Number#condition-expression",children:"Number Condition expression"})," except provided values may be any valid date value like:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"new Date()"}),"\n",(0,r.jsx)(n.li,{children:'"2018-06-18"'}),"\n",(0,r.jsx)(n.li,{children:"1529280000000"}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["In some case TS will report ",(0,r.jsx)(n.code,{children:"$startsWith"})," as valid condition, because ",(0,r.jsx)(n.code,{children:"Date"})," accepts also strings.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"$startsWith"})," is invalid for ",(0,r.jsx)(n.code,{children:"Date"})," and will lead to runtime error. You must avoid using it for dates."]})}),"\n",(0,r.jsx)(n.h3,{id:"update-expressions",children:"Update expressions"}),"\n",(0,r.jsxs)(n.p,{children:["Like Condition expression, Update expressions are not part of Schema, but they are based on defined Schema.",(0,r.jsx)(n.br,{}),"\n","Update expressions are used in ",(0,r.jsx)(n.code,{children:"update"}),", ",(0,r.jsx)(n.code,{children:"transactUpdate"})," and ",(0,r.jsx)(n.code,{children:"transactWrite"})," operations.",(0,r.jsx)(n.br,{}),"\n","DynamoQL supports all DynamoDB update operations."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["All update expressions accept any valid date value.",(0,r.jsx)(n.br,{}),"\n","You dont need to worry about date format (timestamp/EPOCH)."]})}),"\n",(0,r.jsx)(n.h3,{id:"--set-1",children:"- set"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$set"})," replaces stored date by provided date."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  birthday: {\n    // highlight-next-line\n    $set: new Date("1987")\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"shorthand version is"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  birthday: new Date("1987")\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--if-not-exists",children:"- if not exists"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$ifNotExists"})," sets provided date if attribute do not exists in stored item.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"$ifNotExists"})," dont affects Condition expression and is attribute specific.",(0,r.jsx)(n.br,{}),"\n","If attribute exists, stored value stays unchanged."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  birthday: {\n    // highlight-next-line\n    $ifNotExists: new Date("1987")\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--increase--decrease",children:"- increase / decrease"}),"\n",(0,r.jsx)(n.p,{children:"DynamoQL allows you to increase or decrease date (number) attribute value without knowing stored value."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  expire: {\n    // highlight-next-line\n    $date: {\n      year: {\n        $incr: 2\n      },\n      month: {\n        $incr: 1\n      }\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$date"})," operation allows you to increase / decrease by ",(0,r.jsx)(n.code,{children:"year"}),", ",(0,r.jsx)(n.code,{children:"month"}),", ",(0,r.jsx)(n.code,{children:"day"}),", ",(0,r.jsx)(n.code,{children:"hour"})," and ",(0,r.jsx)(n.code,{children:"minute"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Based on your provided ",(0,r.jsx)(n.a,{href:"#--format",children:"format"})," DynamoQL will convert provided number to corresponding time in secondes/milliseconds then generate increase decrease / operation for DynamoDB."]}),"\n",(0,r.jsx)(n.p,{children:"Heres multiplication table which DynamoQL is relying on:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{}),(0,r.jsx)(n.th,{children:"timestamp"}),(0,r.jsx)(n.th,{children:"EPOCH"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"year"}),(0,r.jsx)(n.td,{children:"3.154e10"}),(0,r.jsx)(n.td,{children:"3.154e7"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"month"}),(0,r.jsx)(n.td,{children:"2.628e9"}),(0,r.jsx)(n.td,{children:"2.628e6"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"day"}),(0,r.jsx)(n.td,{children:"8.64e7"}),(0,r.jsx)(n.td,{children:"86400"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hour"}),(0,r.jsx)(n.td,{children:"3.6e6"}),(0,r.jsx)(n.td,{children:"3600"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"minute"}),(0,r.jsx)(n.td,{children:"60000"}),(0,r.jsx)(n.td,{children:"60"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"increase/decrease operation are exact for minute, hour, day, but not for month and year as possible days in a month are 28, 29 for February and 30, 31 for other months."}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["If you need to update second/milliseconde precise value then you should ",(0,r.jsx)(n.code,{children:"get"})," the value from DynamoDB then use ",(0,r.jsx)(n.code,{children:"$set"})," operation."]})}),"\n",(0,r.jsx)(n.admonition,{title:"DynamoDB TTL",type:"tip",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$date"})," operation are 'safe' when working with DynamoDB TTL, because TTL typically deletes expired items within a ",(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/howitworks-ttl.html",children:"few days"})," and ignores TTL values more than 5 years older than the current time."]})})]})}function m(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>s});t(7294);var r=t(512);const a={tabItem:"tabItem_Ymn6"};var i=t(5893);function s(e){let{children:n,hidden:t,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,s),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>D});var r=t(7294),a=t(512),i=t(2466),s=t(6550),d=t(469),l=t(1980),o=t(7392),c=t(12);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,o.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const a=(0,s.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=u(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[o,h]=p({queryString:t,groupId:a}),[x,j]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,c.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),y=(()=>{const e=o??x;return m({value:e,tabValues:i})?e:null})();(0,d.Z)((()=>{y&&l(y)}),[y]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),j(e)}),[h,j,i]),tabValues:i}}var j=t(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(5893);function g(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:d}=e;const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.o5)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),a=d[t].value;a!==r&&(o(n),s(a))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:d.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:h,onClick:c,...i,className:(0,a.Z)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function v(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,a.Z)("tabs-container",y.tabList),children:[(0,f.jsx)(g,{...e,...n}),(0,f.jsx)(b,{...e,...n})]})}function D(e){const n=(0,j.Z)();return(0,f.jsx)(v,{...e,children:h(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>s});var r=t(7294);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);