"use strict";(self.webpackChunkdynamo_ql=self.webpackChunkdynamo_ql||[]).push([[9897],{2269:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var s=t(5893),i=t(1151);const a={},r=void 0,c={id:"model/API/transactUpdate",title:"transactUpdate",description:"Introduction",source:"@site/docs/model/API/transactUpdate.mdx",sourceDirName:"model/API",slug:"/model/API/transactUpdate",permalink:"/dynamoql-site/docs/model/API/transactUpdate",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"transactPut",permalink:"/dynamoql-site/docs/model/API/transactPut"},next:{title:"transactWrite",permalink:"/dynamoql-site/docs/model/API/transactWrite"}},o={},d=[{value:"Introduction",id:"introduction",level:3},{value:"execute",id:"execute",level:3},{value:"options",id:"options",level:3},{value:"exec",id:"exec",level:4},{value:"check",id:"check",level:4}];function l(n){const e={a:"a",br:"br",code:"code",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h3,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"transactUpdate"})," method performs transact update request using aws-sdk ",(0,s.jsx)(e.a,{href:"https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/client/dynamodb/command/TransactWriteItemsCommand/",children:"TransactWriteItemsCommand"}),"."]}),"\n",(0,s.jsx)(e.h3,{id:"execute",children:"execute"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"transactUpdate"})," takes 2 arguments:"]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["(required) list of object which must include:","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"condition"}),": any ",(0,s.jsx)(e.a,{href:"/docs/schema/data-types/String#condition-expression",children:"Condition expression"})," with at least item identifier"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"set"}),": any ",(0,s.jsx)(e.a,{href:"/docs/schema/data-types/String#update-expressions",children:"Update Expression"}),"."]}),"\n",(0,s.jsxs)(e.li,{children:["optionnally ",(0,s.jsx)(e.code,{children:"ReturnValuesOnConditionCheckFailure"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["(optionnal) ",(0,s.jsx)(e.a,{href:"#options",children:"options"})]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:'const res = await User.transactUpdate(\n  [\n    {\n      // highlight-next-line\n      condition: {\n        id: "user-1",\n      },\n      // highlight-next-line\n      set: {\n        age: {\n          $incr: 1,\n        },\n      },\n    },\n    {\n      // highlight-next-line\n      condition: {\n        id: "user-2",\n        sex: "female",\n      },\n      // highlight-next-line\n      set: {\n        "friends[0]": "user-1",\n      },\n    },\n  ],\n  { ReturnConsumedCapacity: "TOTAL" }\n);\n'})}),"\n",(0,s.jsx)(e.h3,{id:"options",children:"options"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"options"})," is an object which accepts ",(0,s.jsx)(e.code,{children:"TransactWriteItemsCommandInput"})," options and DynamoQL specific options."]}),"\n",(0,s.jsx)(e.h4,{id:"exec",children:"exec"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"exec"})," boolean directive to execute or not the actual request.",(0,s.jsx)(e.br,{}),"\n","When ",(0,s.jsx)(e.code,{children:"false"})," transactUpdate will return ",(0,s.jsx)(e.code,{children:"TransactWriteItemsCommandInput"})," object."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:'import type { TransactWriteItemsCommandInput } from "@aws-sdk/client-dynamodb";\n\nconst cmd: TransactWriteItemsCommandInput = await User.transactUpdate(\n  [\n    {\n      condition: {\n        id: "user-1",\n      },\n      set: {\n        firstname: "John",\n      },\n    },\n    {\n      condition: {\n        id: "user-2",\n        age: 22,\n      },\n      set: {\n        firstname: "Sara",\n      },\n    },\n  ],\n  // highlight-next-line\n  { exec: false }\n);\n'})}),"\n",(0,s.jsx)(e.h4,{id:"check",children:"check"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ConditionCheck.html",children:"ConditionCheck"})," on the same table."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:'const res = await User.transactUpdate(\n  [\n    {\n      condition: {\n        id: "user-1",\n        age: 27,\n        firstname: "John",\n      },\n      set: {\n        sex: "male",\n      },\n    },\n    {\n      condition: {\n        id: "user-2",\n        firstname: {\n          $neq: "Sara",\n        },\n      },\n      set: {\n        age: 22,\n        firstname: "Sara",\n        sex: "female",\n        friends: ["user-1"],\n        isActive: true,\n      },\n    },\n  ],\n  {\n    // highlight-start\n    check: [\n      {\n        id: "user-64",\n        isActive: false,\n      },\n    ],\n    // highlight-end\n  }\n);\n'})}),"\n",(0,s.jsxs)(e.p,{children:["If you need ConditionCheck on another table, use ",(0,s.jsx)(e.code,{children:"{ exec: false }"})," then merge your conditions manually."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:'import { TransactWriteItemsCommand } from "@aws-sdk/client-dynamodb";\nimport type { TransactWriteItemsInput } from "@aws-sdk/client-dynamodb";\n\nconst cmd: TransactWriteItemsInput = await User.transactUpdate(\n  [\n    {\n      condition: {\n        id: "user-1",\n      },\n      set: {\n        isActive: true,\n      },\n    },\n    {\n      condition: {\n        id: "user-2",\n        isActive: false,\n      },\n      set: {\n        isActive: true,\n      },\n    },\n  ],\n  { exec: false }\n);\n\n// pretending UserOrders is another instance of Model\n\nconst orderCheck: TransactWriteItemsInput = await UserOrders.transactWrite(\n  [\n    {\n      check: [\n        {\n          id: "user-id",\n          orders: {\n            $size: 0,\n          },\n        },\n      ],\n    },\n  ],\n  { exec: false }\n);\n\ncmd.TransactItems.push(orderCheck.TransactItems[0]);\n\nawait User.client.send(new TransactWriteItemsCommand(cmd));\n'})})]})}function h(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>c,a:()=>r});var s=t(7294);const i={},a=s.createContext(i);function r(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);