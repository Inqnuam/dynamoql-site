"use strict";(self.webpackChunkdynamo_ql=self.webpackChunkdynamo_ql||[]).push([[9073],{4273:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var r=t(5893),s=t(1151),i=t(4866),a=t(5162);const l={},o=void 0,d={id:"schema/data-types/Object",title:"Object",description:"Introduction",source:"@site/docs/schema/data-types/09-Object.mdx",sourceDirName:"schema/data-types",slug:"/schema/data-types/Object",permalink:"/dynamoql-site/docs/schema/data-types/Object",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Number",permalink:"/dynamoql-site/docs/schema/data-types/Number"},next:{title:"Set",permalink:"/dynamoql-site/docs/schema/data-types/Set"}},c={},h=[{value:"Introduction",id:"introduction",level:3},{value:"Define an Object",id:"define-an-object",level:3},{value:"Nested Object",id:"nested-object",level:3},{value:"Options",id:"options",level:3},{value:"- required",id:"--required",level:3},{value:"- default",id:"--default",level:3},{value:"- allow undeclared",id:"--allow-undeclared",level:3},{value:"- set",id:"--set",level:3},{value:"- get",id:"--get",level:3},{value:"- validate",id:"--validate",level:3},{value:"- description",id:"--description",level:3},{value:"Condition expression",id:"condition-expression",level:3},{value:"- equals",id:"--equals",level:3},{value:"- not equals",id:"--not-equals",level:3},{value:"- attribute exists",id:"--attribute-exists",level:3},{value:"- attribute type",id:"--attribute-type",level:3},{value:"- object keys length",id:"--object-keys-length",level:3},{value:"- nested object conditions",id:"--nested-object-conditions",level:3},{value:"- AND",id:"--and",level:3},{value:"- OR",id:"--or",level:3},{value:"- NOT",id:"--not",level:3},{value:"Update expressions",id:"update-expressions",level:3},{value:"- set",id:"--set-1",level:3},{value:"- if not exists",id:"--if-not-exists",level:3},{value:"- remove",id:"--remove",level:3},{value:"- update nested object",id:"--update-nested-object",level:3}];function u(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object"}),' represents DynamoDB\'s Map data type (marshalled as "M").']}),"\n",(0,r.jsx)(n.h3,{id:"define-an-object",children:"Define an Object"}),"\n",(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(a.Z,{value:"dql",label:"DynamoQL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  // highlight-next-line\n  info: Object, // shorthand\n  adress: {\n    // longhand\n    // highlight-start\n    type: Object,\n    allowUndeclared: true,\n    fields: {}\n    // highlight-end\n  }\n} as const);\n'})})}),(0,r.jsx)(a.Z,{value:"ts",label:"produced type",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface IUserSchema {\n    id: string,\n    info: Record<string, any>,\n    adress?: Record<string, any>\n}\n"})})})]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["When Object type is defined with a JS object, ",(0,r.jsx)(n.code,{children:"fields"})," must be defined."]})}),"\n",(0,r.jsx)(n.h3,{id:"nested-object",children:"Nested Object"}),"\n",(0,r.jsxs)(n.p,{children:["To define nested object properties, fill ",(0,r.jsx)(n.code,{children:"fields"})," with desired keys and types"]}),"\n",(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(a.Z,{value:"dql",label:"DynamoQL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  adress: {\n    type: Object,\n    fields: {\n        // highlight-start\n        country: String,\n        city: String,\n        street: String,\n        zip: {\n            type: Number,\n            min: 01,\n            max: 999999\n        }\n        // highlight-end\n    }\n  }\n} as const);\n'})})}),(0,r.jsx)(a.Z,{value:"ts",label:"produced type",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface IUserSchema {\n    id: string,\n    adress?: {\n      country: string;\n      city: string;\n      street: string;\n      zip?: number\n    }\n}\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,r.jsx)(n.h3,{id:"--required",children:"- required"}),"\n",(0,r.jsxs)(n.p,{children:["boolean which makes attribute as required or optionnal, default is ",(0,r.jsx)(n.code,{children:"false"})," when type is defined with a JS object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  adress: {\n    type: Object,\n    // highlight-next-line\n    required: true,\n    fields: {\n      country: String,\n      city: String\n    }\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--default",children:"- default"}),"\n",(0,r.jsxs)(n.p,{children:["To set a default value for an attribute use ",(0,r.jsx)(n.code,{children:"default"})," option."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  adress: {\n    type: Object,\n    fields: {\n      country: String,\n      city: String\n    },\n    // highlight-start\n    default: {\n      country: "France",\n      city: "Paris"\n    },\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["With this configuration when you ",(0,r.jsx)(n.code,{children:"put"})," an Item into your table, your Item will contain adress attribute with ",(0,r.jsx)(n.code,{children:'{country: "France", city: "Paris"}'})," as value."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default"}),"'s type must match ",(0,r.jsx)(n.code,{children:"fields"})," type.\nOtherwise it will throw an error during dev time and runtime."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  adress: {\n    type: Object,\n    fields: {\n      country: String,\n      city: String\n    },\n    // err\n    default: { // DynamoQLInvalidTypeException: "adress.country" expected to be "S" received "N".\n      country: 87, \n      city: "Some-city"\n    }\n  }\n} as const);\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default"})," can also be a (async) function which accepts one argument (put Item value) and must return an object which type's must match ",(0,r.jsx)(n.code,{children:"fields"})," type."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  adress: {\n    type: Object,\n    fields: {\n      country: String,\n      city: String\n    },\n    default: async (item: Record<string, any>) => {\n        const userInfo = await getUserAdress(item.id)\n        return userInfo.adress\n    }\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--allow-undeclared",children:"- allow undeclared"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"allowUndeclared"})," option allows you to define an object with unknown properties.",(0,r.jsx)(n.br,{}),"\n","Default is ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["when ",(0,r.jsx)(n.code,{children:"false"})," all undeclared fields are removed from object before putting or updating an item."]})}),"\n",(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(a.Z,{value:"dql",label:"DynamoQL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  adress: {\n    type: Object,\n    allowUndeclared: true,\n    fields: {}\n  }\n} as const);\n'})})}),(0,r.jsx)(a.Z,{value:"ts",label:"produced type",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface IUserSchema {\n    id: string,\n    adress?: Record<string, any>\n}\n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["It is possible to combine ",(0,r.jsx)(n.code,{children:"fields"})," with ",(0,r.jsx)(n.code,{children:"allowUndeclared"}),":"]}),"\n",(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(a.Z,{value:"dql",label:"DynamoQL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  adress: {\n    type: Object,\n    allowUndeclared: true,\n    fields: {\n        country: String,\n        city: {\n          type: String,\n          required: false \n        }\n    },\n  }\n} as const);\n'})})}),(0,r.jsx)(a.Z,{value:"ts",label:"produced type",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface IUserSchema {\n    id: string,\n    adress?: { country: string; city?:string } & Record<string, any>\n}\n"})})})]}),"\n",(0,r.jsxs)(n.admonition,{title:"Recommandation",type:"info",children:[(0,r.jsxs)(n.p,{children:["Reduce usage of ",(0,r.jsx)(n.code,{children:"allowUndeclared"})," when possible.",(0,r.jsx)(n.br,{}),"\n","Prefer ",(0,r.jsx)(n.code,{children:"union"})," types and ",(0,r.jsx)(n.code,{children:"required"})," declarations in ",(0,r.jsx)(n.code,{children:"fields"})," instead."]}),(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(a.Z,{value:"dql",label:"DynamoQL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  adress: {\n    type: Object,\n    required: true\n    fields: {\n      country: [\n        { type: String },\n        {\n         type: Number,\n         set: (self:number)=> {\n            return getCountryLabelFromCountryCode(self)\n         }\n        }\n      ],\n      city: { type: String },\n      zip: [\n        { type: Number },\n        {\n         type: String,\n         set: (self:string)=> {\n            return Number(self)\n         }\n        }\n      ],\n    },\n  }\n} as const);\n'})})}),(0,r.jsx)(a.Z,{value:"ts",label:"produced type",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface IUserSchema {\n    id: string,\n    adress: {\n      country?: string | number;\n      city?: string;\n      zip?: string | number;\n    }\n}\n"})})})]})]}),"\n",(0,r.jsx)(n.h3,{id:"--set",children:"- set"}),"\n",(0,r.jsxs)(n.p,{children:["To modify a value before storing it use ",(0,r.jsx)(n.code,{children:"set"})," option.",(0,r.jsx)(n.br,{}),"\n","set (async) function accepts 3 arguments:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"self"})," provided value."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," entier put Item object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"setterInfo"})," an optionnal value provided inside in put, batchPut, batchWrite, transactWrite command's options."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"set"})," will not be called if attribute doesn't exists in put Item object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  moderator: Boolean,\n  adress: {\n    type: Object,\n    fields: {\n        country: String,\n        city: String\n    },\n    // highlight-start\n    set: (self: Record<string, any>, item: Record<string, any>, setterInfo?: any)=> {\n        if(item.moderator && setterInfo?.someCondition) {\n         return {\n            country: "UK",\n            city: "London"\n         }\n        }\n        return self\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--get",children:"- get"}),"\n",(0,r.jsx)(n.p,{children:"When reteving an Item we can transform field's value with get option."}),"\n",(0,r.jsx)(n.p,{children:"get (async) function accepts 3 arguments:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"self"})," retrieved value."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," entier retrieved Item object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getterInfo"})," an optionnal value provided inside get, batchGet, transactGet, query, scan command's options."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"get"})," can return anything.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"get"})," will not be called if attribute doesn't exists in stored Item."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  moderator: Boolean,\n  adress: {\n    type: Object,\n    fields: {\n        country: String,\n        city: String\n    },\n    // highlight-start\n    get: (self: Record<string, any>, item: Record<string, any>, getterInfo?: any)=> {\n        if(getterInfo?.someCondition) {\n            return `${self.city}, ${self.country}`\n        }\n         return self\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--validate",children:"- validate"}),"\n",(0,r.jsxs)(n.p,{children:["validate option allows you to manually validate provided value in ",(0,r.jsx)(n.code,{children:"put"})," and ",(0,r.jsx)(n.code,{children:"update"})," commands.",(0,r.jsx)(n.br,{}),"\n","To return an error you should return a string which explains value invalidity. Any other returned value is considered as valid."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  moderator: Boolean,\n  adress: {\n    type: Object,\n    fields: {\n        country: String,\n        city: String\n    },\n    // highlight-start\n    validate: (self: number)=> {\n        if(checkForsomeCondition(self)) {\n            return "some error message."\n        }\n    }\n    // highlight-end\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--description",children:"- description"}),"\n",(0,r.jsx)(n.p,{children:"add any information to the Schema for your personal usage."}),"\n",(0,r.jsx)(n.h3,{id:"condition-expression",children:"Condition expression"}),"\n",(0,r.jsxs)(n.p,{children:["Condition expression are not part of Schema but they are based on your defined Schema.",(0,r.jsx)(n.br,{}),"\n","They are used in various DynamoDB operations to check for some condition(s).",(0,r.jsx)(n.br,{}),"\n","DynamoQL supports all DynamoDB Condition expression."]}),"\n",(0,r.jsx)(n.h3,{id:"--equals",children:"- equals"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    // highlight-start\n    $eq: {\n      country: "France",\n      city: "Paris"\n    }\n     // highlight-end\n  }\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"danger",children:(0,r.jsxs)(n.p,{children:["Unlike other DynamoQL types there is not a shorthand version of ",(0,r.jsx)(n.code,{children:"$eq"})," for Object type.",(0,r.jsx)(n.br,{}),"\n","'shorthand' version will apply Condition expression on nested object keys individually which may lead to unexpected behaviour."]})}),"\n",(0,r.jsx)(n.h3,{id:"--not-equals",children:"- not equals"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    // highlight-start\n    $neq: {\n      country: "France",\n      city: "Paris"\n    }\n     // highlight-end\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--attribute-exists",children:"- attribute exists"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$exists"})," can be ",(0,r.jsx)(n.code,{children:"true"})," or ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  adress: {\n    // highlight-next-line\n    $exists: true\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"--attribute-type",children:"- attribute type"}),"\n",(0,r.jsx)(n.p,{children:"Checks for stored attribute type."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  adress: {\n    // highlight-next-line\n    $type: Object\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$type"})," can be String, Number, Boolean, Null, Buffer, Object, Array, or ",(0,r.jsx)(n.code,{children:"{type: Set, items: String | Number | Buffer }"})]}),"\n",(0,r.jsx)(n.h3,{id:"--object-keys-length",children:"- object keys length"}),"\n",(0,r.jsx)(n.p,{children:"Checks for stored object keys length."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  adress: {\n    // highlight-next-line\n    $size: 1\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$size"})," can also be any valid numeric comparison operator."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  adress: {\n    $size: {\n      // highlight-next-line\n      $gt: 0\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Possible operators are ",(0,r.jsx)(n.a,{href:"./Number#--equals",children:"$eq"}),", ",(0,r.jsx)(n.a,{href:"./Number#--not-equals",children:"$neq"}),", ",(0,r.jsx)(n.a,{href:"./Number#--greather-than",children:"$gt"}),", ",(0,r.jsx)(n.a,{href:"./Number#--greather-than-or-equal",children:"$gte"}),", ",(0,r.jsx)(n.a,{href:"./Number#--little-than",children:"$lt"}),", ",(0,r.jsx)(n.a,{href:"./Number#--little-than-or-equal",children:"$lte"}),", ",(0,r.jsx)(n.a,{href:"./Number#--in",children:"$in"}),", ",(0,r.jsx)(n.a,{href:"./Number#--between",children:"$between"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"--nested-object-conditions",children:"- nested object conditions"}),"\n",(0,r.jsxs)(n.p,{children:["Sometimes we need to verify a condition on a specific property of an object.",(0,r.jsx)(n.br,{}),"\n","Accessing a property is possible with 2 styles."]}),"\n",(0,r.jsx)(n.p,{children:"DynamoDB style"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  // highlight-next-line\n  "adress.city": "Paris"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"DynamoQL style"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    // highlight-next-line\n    city: "Paris"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Please refer to your defined Object ",(0,r.jsx)(n.code,{children:"fields"})," attribute type for more condition.",(0,r.jsx)(n.br,{}),"\n","In our example it will be ",(0,r.jsx)(n.a,{href:"./String#condition-expression",children:"String"})]}),"\n",(0,r.jsx)(n.h3,{id:"--and",children:"- AND"}),"\n",(0,r.jsx)(n.p,{children:"Checks for multiple conditions. Condition is valid if ALL specified conditions are satisfied."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    // highlight-start\n    $and: [\n      {\n        $size: 2\n      },\n      {\n        city: "Paris"\n      }\n    ]\n    // highlight-end\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"shorthand style"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    $size: 2,\n    city: "Paris"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--or",children:"- OR"}),"\n",(0,r.jsx)(n.p,{children:"Checks for multiple conditions. Condition is valid if at least one of specified conditions is satisfied."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    // highlight-start\n    $or: [\n      {\n        $size: 3\n      },\n      {\n        city: "Paris"\n      }\n    ]\n     // highlight-end\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--not",children:"- NOT"}),"\n",(0,r.jsx)(n.p,{children:"Condition is valid if specified condition is NOT satisfied."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    // highlight-next-line\n    $not: {\n      city: "Lyon"\n    }\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$not"})," accepts any Condition expression."]}),"\n",(0,r.jsx)(n.p,{children:"When multiple conditions are provided inside $not: {} they are considered as $and condition."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    $not: {\n      // highlight-start\n      $size: 2,\n      city: "Paris"\n      // highlight-end\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"longhand equivalent is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    $not: {\n      // highlight-start\n      $and: [\n        {\n          $size: 2\n        },\n        {\n          city: "Paris"\n        }\n      ]\n      // highlight-end\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"update-expressions",children:"Update expressions"}),"\n",(0,r.jsx)(n.p,{children:"Like Condition expression, Update expressions are not part of Schema, but they are based on defined Schema."}),"\n",(0,r.jsxs)(n.p,{children:["Update expressions are used in ",(0,r.jsx)(n.code,{children:"update"}),", ",(0,r.jsx)(n.code,{children:"transactUpdate"})," and ",(0,r.jsx)(n.code,{children:"transactWrite"})," operations."]}),"\n",(0,r.jsx)(n.p,{children:"DynamoQL supports all DynamoDB update operations."}),"\n",(0,r.jsx)(n.h3,{id:"--set-1",children:"- set"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$set"})," replaces stored object by provided object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    // highlight-next-line\n    $set: {\n      country: "France",\n      city: "Paris"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"danger",children:(0,r.jsxs)(n.p,{children:["Unlike other DynamoQL types there is not a shorthand version of ",(0,r.jsx)(n.code,{children:"$set"})," for Object type.",(0,r.jsx)(n.br,{}),"\n","'shorthand' version will apply update operations on nested object keys individually which will lead to a partial update of stored object."]})}),"\n",(0,r.jsx)(n.h3,{id:"--if-not-exists",children:"- if not exists"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$ifNotExists"})," sets provided object if attribute do not exists in stored item.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"$ifNotExists"})," dont affects Condition expression and is attribute specific.",(0,r.jsx)(n.br,{}),"\n","If attribute exists, stored value stays unchanged."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    // highlight-next-line\n    $ifNotExists: {\n      country: "France",\n      city: "Paris"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--remove",children:"- remove"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"remove"})," removes an attribute from stored object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    // highlight-next-line\n    $remove: "city"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"It is possible to remove multiple attributes by passing an array of attributes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    // highlight-next-line\n    $remove: ["city", "country"]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"You can only remove optionnal attributes."})}),"\n",(0,r.jsx)(n.h3,{id:"--update-nested-object",children:"- update nested object"}),"\n",(0,r.jsx)(n.p,{children:"Using JS dot notation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "adress.city": "Lyon"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Using DynamoQL syntax."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  adress: {\n    city: "Lyon"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Please refer to your defined Object ",(0,r.jsx)(n.code,{children:"fields"})," attribute type for more update operations.",(0,r.jsx)(n.br,{}),"\n","In our example it will be ",(0,r.jsx)(n.a,{href:"./String#update-expressions",children:"String"})]})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>a});t(7294);var r=t(512);const s={tabItem:"tabItem_Ymn6"};var i=t(5893);function a(e){let{children:n,hidden:t,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,a),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>S});var r=t(7294),s=t(512),i=t(2466),a=t(6550),l=t(469),o=t(1980),d=t(7392),c=t(12);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}(t);return function(e){const n=(0,d.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,a.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o._X)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(s.location.search);n.set(i,e),s.replace({...s.location,search:n.toString()})}),[i,s])]}function j(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,i=u(e),[a,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[d,h]=m({queryString:t,groupId:s}),[j,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,i]=(0,c.Nk)(t);return[s,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:s}),g=(()=>{const e=d??j;return p({value:e,tabValues:i})?e:null})();(0,l.Z)((()=>{g&&o(g)}),[g]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),x(e)}),[h,x,i]),tabValues:i}}var x=t(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(5893);function f(e){let{className:n,block:t,selectedValue:r,selectValue:a,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),c=e=>{const n=e.currentTarget,t=o.indexOf(n),s=l[t].value;s!==r&&(d(n),a(s))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>o.push(e),onKeyDown:h,onClick:c,...i,className:(0,s.Z)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:s}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function v(e){const n=j(e);return(0,y.jsxs)("div",{className:(0,s.Z)("tabs-container",g.tabList),children:[(0,y.jsx)(f,{...e,...n}),(0,y.jsx)(b,{...e,...n})]})}function S(e){const n=(0,x.Z)();return(0,y.jsx)(v,{...e,children:h(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var r=t(7294);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);