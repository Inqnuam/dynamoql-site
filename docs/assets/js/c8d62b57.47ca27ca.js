"use strict";(self.webpackChunkdynamo_ql=self.webpackChunkdynamo_ql||[]).push([[3201],{4957:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>d,metadata:()=>o,toc:()=>h});var r=t(5893),i=t(1151),s=t(4866),a=t(5162);const d={},l=void 0,o={id:"schema/data-types/Set",title:"Set",description:"Introduction",source:"@site/docs/schema/data-types/10-Set.mdx",sourceDirName:"schema/data-types",slug:"/schema/data-types/Set",permalink:"/dynamoql-site/docs/schema/data-types/Set",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Object",permalink:"/dynamoql-site/docs/schema/data-types/Object"},next:{title:"String",permalink:"/dynamoql-site/docs/schema/data-types/String"}},c={},h=[{value:"Introduction",id:"introduction",level:3},{value:"Define an Set",id:"define-an-set",level:3},{value:"Options",id:"options",level:3},{value:"- required",id:"--required",level:3},{value:"- default",id:"--default",level:3},{value:"- validate",id:"--validate",level:3},{value:"- set",id:"--set",level:3},{value:"- get",id:"--get",level:3},{value:"- description",id:"--description",level:3},{value:"Condition expression",id:"condition-expression",level:3},{value:"- equals",id:"--equals",level:3},{value:"- not equals",id:"--not-equals",level:3},{value:"- attribute exists",id:"--attribute-exists",level:3},{value:"- includes",id:"--includes",level:3},{value:"- Set length",id:"--set-length",level:3},{value:"- attribute type",id:"--attribute-type",level:3},{value:"- in",id:"--in",level:3},{value:"- AND",id:"--and",level:3},{value:"- OR",id:"--or",level:3},{value:"- NOT",id:"--not",level:3},{value:"Update expressions",id:"update-expressions",level:3},{value:"- set",id:"--set-1",level:3},{value:"- if not exists",id:"--if-not-exists",level:3},{value:"- add",id:"--add",level:3},{value:"- delete",id:"--delete",level:3}];function u(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Set"}),' represents DynamoDB\'s "SS", "NS", "BS" data types.\nWith DynamoQL Every ',(0,r.jsx)(n.code,{children:"Set"})," type must be defined with its ",(0,r.jsx)(n.code,{children:"items"})," type.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"items"})," can be ",(0,r.jsx)(n.a,{href:"./String",children:"String"}),", ",(0,r.jsx)(n.a,{href:"./Number",children:"Number"}),", ",(0,r.jsx)(n.a,{href:"./Date",children:"Date"})," or ",(0,r.jsx)(n.a,{href:"./Buffer",children:"Buffer"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"define-an-set",children:"Define an Set"}),"\n",(0,r.jsxs)(s.Z,{children:[(0,r.jsx)(a.Z,{value:"dql",label:"DynamoQL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  friendId: {\n    // highlight-start\n    type: Set,\n    items: String\n    // highlight-end\n  }\n} as const);\n'})})}),(0,r.jsx)(a.Z,{value:"ts",label:"produced type",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface IUserSchema {\n    id: string,\n    friendId?: Set<string>\n}\n"})})})]}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"items"})," can not be a union type."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  friendId: {\n    type: Set,\n    // err\n    items: [String, Number]\n  }\n} as const);\n'})}),(0,r.jsx)(n.p,{children:"However you can use union type for the entier Set type"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  friendId: [\n    // highlight-start\n    {\n      type: Set,\n      items: String\n    },\n    {\n      type: Set,\n      items: Number\n    },\n    // highlight-end\n  ]\n  \n} as const);\n'})})]}),"\n",(0,r.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,r.jsx)(n.h3,{id:"--required",children:"- required"}),"\n",(0,r.jsxs)(n.p,{children:["boolean which makes attribute as required or optionnal, default is ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  friendId: {\n    type: Set,\n    items: String,\n    // highlight-next-line\n    required: true\n  }\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--default",children:"- default"}),"\n",(0,r.jsxs)(n.p,{children:["To set a default value for an attribute use ",(0,r.jsx)(n.code,{children:"default"})," option."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n  id: {\n    type: String,\n    primaryIndex: true,\n    default: randomUUID\n  },\n  friendId: {\n    type: Set,\n    items: String,\n    // highlight-next-line\n    default: new Set(["steve", "john"])\n  }\n} as const);\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default"})," value's type must match defined Set's type.",(0,r.jsx)(n.br,{}),"\n","Otherwise it will throw an error during dev time and runtime."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\n id: {\n   type: String,\n   primaryIndex: true,\n   default: randomUUID\n },\n friendId: {\n   type: Set,\n   items: String,\n   // err\n   default: new Set([1, 2, 9]) // DynamoQLInvalidTypeException: "friendId[0]" expected to be "SS" received "NS".\n }\n} as const);\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default"})," can also be a (async) function which accepts one argument (put Item value) and must return a Set of defined type."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\n// highlight-next-line\nmoderator: Boolean,\nfriendId: {\n  type: Set,\n  items: String,\n  // highlight-start\n  default: (item: Record<string, any>)=> {\n      if(item.moderator) {\n          return ["admin-id"]\n      }\n      return []\n  }\n  // highlight-end\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--validate",children:"- validate"}),"\n",(0,r.jsxs)(n.p,{children:["validate option allows you to manually validate provided value in ",(0,r.jsx)(n.code,{children:"put"})," and ",(0,r.jsx)(n.code,{children:"update"})," commands.",(0,r.jsx)(n.br,{}),"\n","To return an error you should return a string which explains value invalidity. Any other returned value is considered as valid."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\nfriendId: {\n  type: Set,\n  items: String,\n  // highlight-start\n  validate: (self: Set<string>)=> {\n      if(self.length > 10) {\n          return "Error: Can not have more than 10 friends."\n      }\n  }\n  // highlight-end\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--set",children:"- set"}),"\n",(0,r.jsxs)(n.p,{children:["To modify a value before storing it use ",(0,r.jsx)(n.code,{children:"set"})," option.",(0,r.jsx)(n.br,{}),"\n","set (async) function accepts 3 arguments:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"self"})," provided value."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," entier put Item object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"setterInfo"})," an optionnal value provided inside in put, batchPut, batchWrite, transactWrite command's options."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"set"})," will not be called if attribute doesn't exists in put Item object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\nfriendId: {\n  type: Set,\n  items: String,\n  // highlight-start\n  set: (self: Set<string>, item: Record<string, any>, setterInfo?: any)=> {\n\n      if(item.moderator && setterInfo?.someCondition) {\n       return new Set(["admin"])\n      }\n\n      return self\n  }\n  // highlight-end\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--get",children:"- get"}),"\n",(0,r.jsx)(n.p,{children:"When reteving an Item we can transform field's value with get option."}),"\n",(0,r.jsx)(n.p,{children:"get (async) function accepts 3 arguments:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"self"})," retrieved value."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," entier retrieved Item object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getterInfo"})," an optionnal value provided inside get, batchGet, transactGet, query, scan command's options."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"get"})," can return anything.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"get"})," will not be called if attribute doesn't exists in stored Item."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Schema } from "dynamoql";\nimport { randomUUID } from "crypto";\n\nconst userSchema = new Schema({\nid: {\n  type: String,\n  primaryIndex: true,\n  default: randomUUID\n},\nmoderator: Boolean,\nfriendId: {\n  type: Set,\n  items: String,\n  // highlight-start\n  get: (self: Set<string>, item: Record<string, any>, getterInfo?: any)=> {\n       return Array.from(self.values()).map(x=> doSomething(x))\n  }\n  // highlight-end\n}\n} as const);\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"get"})," returned value's type affects Item type when retriving Item(s) from DynamoDB."]})}),"\n",(0,r.jsx)(n.h3,{id:"--description",children:"- description"}),"\n",(0,r.jsx)(n.p,{children:"add any information to the Schema for your personal usage."}),"\n",(0,r.jsx)(n.h3,{id:"condition-expression",children:"Condition expression"}),"\n",(0,r.jsxs)(n.p,{children:["Condition expression are not part of Schema but they are based on your defined Schema.",(0,r.jsx)(n.br,{}),"\n","They are used in various DynamoDB operations to check for some condition(s).",(0,r.jsx)(n.br,{}),"\n","DynamoQL supports all DynamoDB Condition expression."]}),"\n",(0,r.jsx)(n.h3,{id:"--equals",children:"- equals"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: new Set(["user-1"])\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    // highlight-next-line\n    $eq: new Set(["user-1"])\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--not-equals",children:"- not equals"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    // highlight-next-line\n    $neq: new Set(["user-1"])\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--attribute-exists",children:"- attribute exists"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$exists"})," can be ",(0,r.jsx)(n.code,{children:"true"})," or ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  friendId: {\n    // highlight-next-line\n    $exists: true\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"--includes",children:"- includes"}),"\n",(0,r.jsx)(n.p,{children:"Checks if stored Set contains provided value."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    // highlight-next-line\n    $includes: "user-1"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--set-length",children:"- Set length"}),"\n",(0,r.jsx)(n.p,{children:"Checks for stored Set's length."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  friendId: {\n    // highlight-next-line\n    $size: 1\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$size"})," can also be any valid numeric comparison operator."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  friendId: {\n    $size: {\n      // highlight-next-line\n      $gt: 0\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Possible operators are ",(0,r.jsx)(n.a,{href:"./Number#--equals",children:"$eq"}),", ",(0,r.jsx)(n.a,{href:"./Number#--not-equals",children:"$neq"}),", ",(0,r.jsx)(n.a,{href:"./Number#--greather-than",children:"$gt"}),", ",(0,r.jsx)(n.a,{href:"./Number#--greather-than-or-equal",children:"$gte"}),", ",(0,r.jsx)(n.a,{href:"./Number#--little-than",children:"$lt"}),", ",(0,r.jsx)(n.a,{href:"./Number#--little-than-or-equal",children:"$lte"}),", ",(0,r.jsx)(n.a,{href:"./Number#--in",children:"$in"}),", ",(0,r.jsx)(n.a,{href:"./Number#--between",children:"$between"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"--attribute-type",children:"- attribute type"}),"\n",(0,r.jsx)(n.p,{children:"Checks for stored attribute type."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  friendId: {\n    // highlight-next-line\n    $type: {\n      type: Set,\n      items: String\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$type"})," can be String, Number, Boolean, Null, Buffer, Object, Array, or ",(0,r.jsx)(n.code,{children:"{type: Set, items: String | Number | Buffer }"})]}),"\n",(0,r.jsx)(n.h3,{id:"--in",children:"- in"}),"\n",(0,r.jsx)(n.p,{children:"Checks if provided array includes stored Set."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    // highlight-next-line\n    $in: ["Steve", 214, "Sara", false, "John", "Mike", null, new Set(["user-1"])]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--and",children:"- AND"}),"\n",(0,r.jsx)(n.p,{children:"Checks for multiple conditions. Condition is valid if ALL specified conditions are satisfied."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    // highlight-start\n    $and: [\n      {\n        $size: 6\n      },\n      {\n        $includes: "user-1"\n      }\n    ]\n    // highlight-end\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"shorthand style"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    $size: 6,\n    $includes: "user-1"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--or",children:"- OR"}),"\n",(0,r.jsx)(n.p,{children:"Checks for multiple conditions. Condition is valid if at least one of specified conditions is satisfied."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    // highlight-start\n    $or: [\n      {\n        $size: 6\n      },\n      {\n        $includes: "user-1"\n      }\n    ]\n     // highlight-end\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--not",children:"- NOT"}),"\n",(0,r.jsx)(n.p,{children:"Condition is valid if specified condition is NOT satisfied."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    // highlight-next-line\n    $not: {\n      $includes: "user-1"\n    }\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$not"})," accepts any Condition expression."]}),"\n",(0,r.jsx)(n.p,{children:"When multiple conditions are provided inside $not: {} they are considered as $and condition."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    $not: {\n      // highlight-start\n      $size: 6,\n      $includes: "user-1"\n      // highlight-end\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"longhand equivalent is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    $not: {\n      // highlight-start\n      $and: [\n        {\n          $size: 6\n        },\n        {\n          $includes: "user-1"\n        }\n      ]\n      // highlight-end\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"update-expressions",children:"Update expressions"}),"\n",(0,r.jsx)(n.p,{children:"Like Condition expression, Update expressions are not part of Schema, but they are based on defined Schema."}),"\n",(0,r.jsxs)(n.p,{children:["Update expressions are used in ",(0,r.jsx)(n.code,{children:"update"}),", ",(0,r.jsx)(n.code,{children:"transactUpdate"})," and ",(0,r.jsx)(n.code,{children:"transactWrite"})," operations."]}),"\n",(0,r.jsx)(n.p,{children:"DynamoQL supports all DynamoDB update operations."}),"\n",(0,r.jsx)(n.h3,{id:"--set-1",children:"- set"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$set"})," replaces stored Set by provided Set."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    // highlight-next-line\n    $set: new Set(["user-1"])\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"shorthand version is"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: new Set(["user-1"])\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--if-not-exists",children:"- if not exists"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$ifNotExists"})," sets provided Set if attribute do not exists in stored item.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"$ifNotExists"})," dont affects Condition expression and is attribute specific.",(0,r.jsx)(n.br,{}),"\n","If attribute exists, stored value stays unchanged."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    // highlight-next-line\n    $ifNotExists: new Set(["user-1"])\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--add",children:"- add"}),"\n",(0,r.jsx)(n.p,{children:"Adds value(s) to stored Set."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    // highlight-next-line\n    $add: "user-1"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Add multiple values."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    // highlight-next-line\n    $add: ["user-1", "user-2"]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"--delete",children:"- delete"}),"\n",(0,r.jsx)(n.p,{children:"Deletes value(s) from stored Set."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    // highlight-next-line\n    $delete: "user-1"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Delete multiple values."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  friendId: {\n    // highlight-next-line\n    $delete: ["user-1", "user-2"]\n  }\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>a});t(7294);var r=t(512);const i={tabItem:"tabItem_Ymn6"};var s=t(5893);function a(e){let{children:n,hidden:t,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,a),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>S});var r=t(7294),i=t(512),s=t(2466),a=t(6550),d=t(469),l=t(1980),o=t(7392),c=t(12);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:i}}=e;return{value:n,label:t,attributes:r,default:i}}))}(t);return function(e){const n=(0,o.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const i=(0,a.k6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(i.location.search);n.set(s,e),i.replace({...i.location,search:n.toString()})}),[s,i])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,s=u(e),[a,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[o,h]=p({queryString:t,groupId:i}),[x,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,s]=(0,c.Nk)(t);return[i,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:i}),g=(()=>{const e=o??x;return m({value:e,tabValues:s})?e:null})();(0,d.Z)((()=>{g&&l(g)}),[g]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),f(e)}),[h,f,s]),tabValues:s}}var f=t(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(5893);function v(e){let{className:n,block:t,selectedValue:r,selectValue:a,tabValues:d}=e;const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,s.o5)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),i=d[t].value;i!==r&&(o(n),a(i))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n),children:d.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:h,onClick:c,...s,className:(0,i.Z)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:i}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function b(e){const n=x(e);return(0,j.jsxs)("div",{className:(0,i.Z)("tabs-container",g.tabList),children:[(0,j.jsx)(v,{...e,...n}),(0,j.jsx)(y,{...e,...n})]})}function S(e){const n=(0,f.Z)();return(0,j.jsx)(b,{...e,children:h(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>a});var r=t(7294);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);